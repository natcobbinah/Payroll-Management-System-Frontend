[{"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\index.js":"1","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js":"2","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\App.js":"3","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js":"4","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js":"5","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js":"6","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js":"7","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js":"8","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js":"9","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js":"10","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js":"11","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js":"12","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js":"13","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js":"14","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js":"15","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js":"16","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js":"17"},{"size":547,"mtime":1612002297887,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":515,"mtime":1612007362592,"results":"21","hashOfConfig":"19"},{"size":2965,"mtime":1612007993314,"results":"22","hashOfConfig":"19"},{"size":417,"mtime":1612033855562,"results":"23","hashOfConfig":"19"},{"size":7001,"mtime":1612128379965,"results":"24","hashOfConfig":"19"},{"size":20425,"mtime":1612042468778,"results":"25","hashOfConfig":"19"},{"size":10709,"mtime":1612033833441,"results":"26","hashOfConfig":"19"},{"size":7534,"mtime":1612099573060,"results":"27","hashOfConfig":"19"},{"size":10915,"mtime":1612113792298,"results":"28","hashOfConfig":"19"},{"size":14622,"mtime":1612113770470,"results":"29","hashOfConfig":"19"},{"size":8095,"mtime":1612099521340,"results":"30","hashOfConfig":"19"},{"size":7811,"mtime":1612115212693,"results":"31","hashOfConfig":"19"},{"size":13535,"mtime":1612113729560,"results":"32","hashOfConfig":"19"},{"size":208,"mtime":1612015641094,"results":"33","hashOfConfig":"19"},{"size":20542,"mtime":1612125582572,"results":"34","hashOfConfig":"19"},{"size":3050,"mtime":1612115847742,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"z39r0f",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\index.js",[],["79","80"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\App.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js",["81","82","83"],"import React,{Component} from 'react'\r\nimport GoogleLogin from 'react-google-login'\r\nimport axios from 'axios'\r\nimport './loginform.css'\r\nimport {Container,Row,Col,Form,Button} from 'react-bootstrap'\r\n\r\nclass LoginForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n        \r\n          //login in with google\r\n          buttonText:'Login With Google',\r\n          googlename:null,\r\n          googleemail:null,\r\n          googletoken:null,\r\n          googleProviderId: 'Google',\r\n          onGoogleLoginSuccess: null,\r\n          onGoogleLoginFailure: null,\r\n          clientId: '552767747033-o7fm828mscm2otn5oprkfjjtq3qscqad.apps.googleusercontent.com'\r\n        }\r\n\r\n        this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\r\n    }\r\n\r\n    handleLoginSubmit(){\r\n        //redirect to main dashboard\r\n\r\n        this.props.history.push(\"/main\")\r\n    }\r\n\r\n    signUpUserIfnotINDB(response){\r\n        //will implement logics here\r\n\r\n        //redirect to main dashboard\r\n        this.props.history.push(\"/main\")\r\n    }\r\n\r\n    render(){\r\n        const{buttonText,clientId} = this.state;\r\n        const onGoogleLoginSuccess = (response) => {\r\n            let res = response.profileObj;\r\n            \r\n            this.signUpUserIfnotINDB(response);\r\n        }\r\n\r\n        const onGoogleLoginFailure = (response) => {\r\n            let res = response.profileObj;\r\n        }\r\n\r\n        return(\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"sidePage\" md={3}></Col>\r\n                    <Col md={2} className=\"formpage\"></Col>\r\n                    <Col md={4} className=\"formpage\">\r\n                        <Form className=\"mt-5 pt-2\">\r\n                            <Form.Group controlId=\"email\">\r\n                                <Form.Label className=\"mt-5 pt-5\">Email address</Form.Label>\r\n                                <Form.Control type=\"email\" size=\"lg\" placeholder=\"Enter email\"/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"password\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" size=\"lg\" placeholder=\"Password\"/>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\"  type=\"submit\" size=\"lg\" block className=\"mb-4\" onClick={this.handleLoginSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                            <GoogleLogin clientId={clientId} buttonText={buttonText}\r\n                                         onSuccess={onGoogleLoginSuccess}\r\n                                         onFailure={onGoogleLoginFailure}/>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={3} className=\"formpage\"></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js",["84","85","86","87"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js",["88"],"import { Container,Button,Alert,Modal,Form,Col} from \"react-bootstrap\"\r\nimport React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATHGETALLUSERS,PARAM_PAGE,PATH_DELETEUSER\r\n ,PARAM_DELETE,PATH_SENDLOGINDETAILS_GMAIL,PATH_PATCH_EDITUSER} from '../API_URLS'\r\nimport {Table} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash, faToggleOn, faMailBulk } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass ViewUsers extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            //retrieve users attributes\r\n            result:null,\r\n            error:null,\r\n\r\n            //delete user attributes\r\n            resultDel:null,\r\n            errorDel:null,\r\n\r\n            //send login details attributes\r\n            loginDetailSent:null,\r\n            loginDetailsError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n\r\n            //checkbox attribute\r\n            userstoDisable:[],\r\n\r\n            //update user atttributes\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSelected = this.onSelected.bind(this);\r\n        this.SendLoginDetails = this.SendLoginDetails.bind(this);\r\n        this.onEditUser = this.onEditUser.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n    }\r\n    \r\n    fetchAllUsers(page = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .then(error => this.setState({error}));\r\n    }\r\n\r\n    onSelected(id){\r\n        const{userstoDisable}=this.state;\r\n        userstoDisable.push(id);\r\n    }\r\n\r\n    onDelete(id){\r\n        const{userstoDisable,result}=this.state;\r\n        if(userstoDisable[0] === id){\r\n            axios.get(`${PATHBASE}${PATH_DELETEUSER}?${PARAM_DELETE}${id}`)\r\n                 .then(resultDel => this.setState({resultDel: resultDel.data}))\r\n                 .then(errorDel => this.setState({errorDel}))\r\n            userstoDisable.pop();\r\n\r\n        this.fetchAllUsers();\r\n        }else{\r\n            window.alert(\"You need to select immediate checkbox before you can delete\")\r\n        }\r\n    }\r\n\r\n    SendLoginDetails(email,password){\r\n        axios.get(`${PATHBASE}${PATH_SENDLOGINDETAILS_GMAIL}/${email}/${password}`)\r\n             .then(loginDetailSent => this.setState({loginDetailSent: loginDetailSent.data}))\r\n             .then(loginDetailsError => this.setState({loginDetailsError}))\r\n    }       \r\n\r\n    onEditUser(userid,useraddress,usercity,useremail,\r\n        useremployeeid,useremployeelevel,userenabled,userpassword,userphonenumber,\r\n        userbankaccountnumber,userbirthdate,usergender,userhiredate,usermaritalstatus,\r\n        userbirthcertid,userdriverslicenseid,userpassportid,userssnitid,uservotersid,\r\n        username,usertinnumber,usermarriagecertid,userusercreator){\r\n\r\n        this.setState({\r\n            id: userid,\r\n            address: useraddress,\r\n            city: usercity,\r\n            email: useremail,\r\n            employeeid: useremployeeid,\r\n            employeelevel: useremployeelevel ,\r\n            enabled: userenabled,\r\n            password: userpassword,\r\n            phonenumber: userphonenumber,\r\n            bankaccountnumber:userbankaccountnumber,\r\n            birthdate: userbirthdate,\r\n            gender:usergender,\r\n            hiredate: userhiredate,\r\n            maritalstatus:usermaritalstatus,\r\n            birthcertid: userbirthcertid,\r\n            driverslicenseid: userdriverslicenseid,\r\n            passportid: userpassportid,\r\n            ssnitid: userssnitid,\r\n            votersid:uservotersid,\r\n            tinnumber: usertinnumber,\r\n            marriagecertid: usermarriagecertid,\r\n            usercreator: userusercreator,\r\n            name: username,\r\n       })\r\n\r\n       this.setState({\r\n           showModal:true\r\n       })\r\n    }\r\n\r\n    updateUser(){\r\n        const{id, address,city,email,employeeid,employeelevel,enabled,password,phonenumber,bankaccountnumber,birthdate,\r\n            gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n            marriagecertid,usercreator} = this.state;\r\n        \r\n            const headers = { 'content-type': 'application/json'};\r\n            axios({\r\n                method: 'patch',\r\n                url: `${PATHBASE}${PATH_PATCH_EDITUSER}`,\r\n                data: {\r\n                    id:id,\r\n                    address: address,\r\n                    city: city,\r\n                    email: email,\r\n                    employeeid: employeeid,\r\n                    employeelevel: employeelevel ,\r\n                    enabled: enabled,\r\n                    password: password,\r\n                    phonenumber: phonenumber,\r\n                    bankaccountnumber:bankaccountnumber,\r\n                    birthdate: birthdate,\r\n                    gender:gender,\r\n                    hiredate: hiredate,\r\n                    maritalstatus:maritalstatus,\r\n                    birthcertid: birthcertid,\r\n                    driverslicenseid: driverslicenseid,\r\n                    passportid: passportid,\r\n                    ssnitid: ssnitid,\r\n                    votersid:votersid,\r\n                    tinnumber: tinnumber,\r\n                    marriagecertid: marriagecertid,\r\n                    usercreator: usercreator,\r\n                    name: name,\r\n                },\r\n                headers: headers\r\n            })\r\n            .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n            .catch(onUpdateError => this.setState({onUpdateError}));\r\n            \r\n            this.fetchAllUsers();    \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllUsers();\r\n    }\r\n   \r\n    render(){\r\n        const{result,error,resultDel,errorDel, page = 0,show,\r\n        loginDetailSent,loginDetailsError,showModal, onUpdateSuccess,\r\n        onUpdateError,\r\n        \r\n        //user data attributes\r\n        address,city,email,employeeid,employeelevel,password,phonenumber,bankaccountnumber,birthdate,\r\n        gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n        marriagecertid,   \r\n        } = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {error?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Unsuccessful Fetching User Records</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {errorDel?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Failure Deleting User Record</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {resultDel?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>User Deleted Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailSent?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>LoginCredentials Sent Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailsError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Sending LoginCredentials  UnSuccessfully</Alert.Heading>\r\n                    <p>Email might be wrong: or Server might be down</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {result?\r\n                  <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>EmployeeID</th>\r\n                            <th>EmployeeLevel</th>\r\n                            <th>BankAccountNo</th>\r\n                            <th>HireDate</th>\r\n                            <th>SSNITID</th>\r\n                            <th>NAME</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {result.content.map(user => \r\n                            <tr key={user.id}>\r\n                                <td>{user.employeeid}</td>\r\n                                <td>{user.employeelevel}</td>\r\n                                <td>{user.bankaccountnumber}</td>\r\n                                <td>{user.hiredate}</td>\r\n                                <td>{user.ssnitid}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>\r\n                                    <input type=\"checkbox\" onChange={() => this.onSelected(user.id)}/>\r\n                                    <Button variant=\"primary mx-1\" onClick={() => this.fetchAllUsers(page - 1)}>\r\n                                      <FontAwesomeIcon icon={faToggleOn}/>\r\n                                    </Button>\r\n                                    <Button variant=\"secondary mx-1\" onClick={() => this.onEditUser(user.id,user.address,user.city,user.email,\r\n                                        user.employeeid,user.employeelevel,user.enabled,user.password,user.phonenumber,\r\n                                        user.bankaccountnumber,user.birthdate,user.gender,user.hiredate,user.maritalstatus,\r\n                                        user.birthcertid,user.driverslicenseid,user.passportid,user.ssnitid,user.votersid,\r\n                                        user.name,user.tinnumber,user.marriagecertid,user.usercreator\r\n                                    )}>\r\n                                      <FontAwesomeIcon icon={faEdit}/>\r\n                                    </Button>\r\n                                    <Button variant=\"danger mx-1\" onClick={() => this.onDelete(user.id)}>\r\n                                      <FontAwesomeIcon icon={faTrash}/>\r\n                                    </Button>\r\n                                    <Button variant=\"success\" onClick={() => this.SendLoginDetails(user.email,user.password)}>\r\n                                      <FontAwesomeIcon icon={faMailBulk}/>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                         )\r\n                        }\r\n                    </tbody>\r\n                  </Table>\r\n                 : null\r\n                }\r\n                <Button variant=\"primary\" onClick={() => this.fetchAllUsers(page - 1)}>\r\n                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                    Prev\r\n                </Button>\r\n                <Button variant=\"primary mx-3\" onClick={() => this.fetchAllUsers(page + 1)}>\r\n                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                    Next\r\n                </Button>\r\n\r\n                {/* launch modal on edit button clicked */}\r\n                <Modal show={showModal} size=\"lg\" onHide={(event) => this.setState({showModal: false})} aria-labelledby=\"contained-modal-title-vcenter\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit User Details</Modal.Title>\r\n                        {onUpdateError?\r\n                        <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>Unsuccessful Updating User Record</Alert.Heading>\r\n                           <p>Server might be down or currently not available</p>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n\r\n                        {onUpdateSuccess?\r\n                        <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>User Record Updated Successfully</Alert.Heading>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Container fluid>\r\n                            <Form>\r\n                              <Form.Row>\r\n                                 <Col>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={name} onChange={(e) => this.setState({name : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control type=\"text\" value={address} onChange={(e) => this.setState({address : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                 <Col>\r\n                                   <Form.Label>Email</Form.Label>\r\n                                   <Form.Control type=\"email\" value={email} onChange={(e) => this.setState({email : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                   <Form.Label>Password</Form.Label>\r\n                                   <Form.Control type=\"password\" value={password} onChange={(e) => this.setState({password : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                               </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                  <Col md={3}>\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control type=\"text\" value={gender} onChange={(e) => this.setState({gender : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>Date of Birth</Form.Label>\r\n                                    <Form.Control type=\"date\" value={birthdate} onChange={(e) => this.setState({birthdate : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>EmployeeLevel</Form.Label>\r\n                                    <Form.Control type=\"text\" value={employeelevel} onChange={(e) => this.setState({employeelevel : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Label>HireDate</Form.Label>\r\n                                    <Form.Control type=\"date\" value={hiredate} onChange={(e) => this.setState({hiredate : e.target.value})}></Form.Control>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"mt-4\">\r\n                              <Col md={3}>\r\n                                 <Form.Label>City</Form.Label>\r\n                                 <Form.Control type=\"text\" value={city} onChange={(e) => this.setState({city : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>PhoneNumber</Form.Label>\r\n                                 <Form.Control type=\"text\" value={phonenumber} onChange={(e) => this.setState({phonenumber : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>MaritalStatus</Form.Label>\r\n                                 <Form.Control type=\"text\" value={maritalstatus} onChange={(e) => this.setState({maritalstatus : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                <Form.Label>EmployeeID</Form.Label>\r\n                                <Form.Control type=\"text\" value={employeeid} onChange={(e) => this.setState({employeeid : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                               <Form.Label>BankAccountNo</Form.Label>\r\n                               <Form.Control type=\"text\" value={bankaccountnumber} placedholder=\"Enter bankaccountno here\" onChange={(e) => this.setState({bankaccountnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>SSNITID</Form.Label>\r\n                               <Form.Control type=\"text\" value={ssnitid} onChange={(e) => this.setState({ssnitid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                              <Form.Label>VotersID</Form.Label>\r\n                              <Form.Control type=\"text\" value={votersid} onChange={(e) => this.setState({votersid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                               <Form.Label>BirthCertificate</Form.Label>\r\n                               <Form.Control type=\"text\" value={birthcertid} onChange={(e) => this.setState({birthcertid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                                <Form.Label>DriversLicense</Form.Label>\r\n                                <Form.Control type=\"text\" value={driverslicenseid} onChange={(e) => this.setState({driverslicenseid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>PassportNo</Form.Label>\r\n                                <Form.Control type=\"text\" value={passportid} onChange={(e) => this.setState({passportid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>Tin Number</Form.Label>\r\n                               <Form.Control type=\"text\" value={tinnumber} onChange={(e) => this.setState({tinnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>Marriage Cert</Form.Label>\r\n                                <Form.Control type=\"text\" value={marriagecertid} onChange={(e) => this.setState({marriagecertid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                          </Form.Row>\r\n                           <Form.Row className=\"mt-4\">\r\n                            <Col md={4}></Col>\r\n                            <Col md={4}>\r\n                               <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateUser}>\r\n                                 UpdateDetails\r\n                               </Button>\r\n                             </Col>\r\n                            <Col md={4}></Col>\r\n                          </Form.Row>\r\n                          </Form>\r\n                        </Container>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewUsers","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js",["89","90","91","92","93","94","95"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GET_ROLES,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSERROLES} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus,faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForRole = searchRole => role =>\r\n    role.rolename.toLowerCase().includes(searchRole.toLowerCase());\r\n\r\nclass AssignRoles extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchRole: '',\r\n\r\n             //fetch role objects\r\n             resultRolefetch: null,\r\n             errorRolefetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign role objects\r\n             resultRoleAssign: null,\r\n             errorRoleAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllRoles = this.fetchAllRoles.bind(this);\r\n        this.assignRole = this.assignRole.bind(this);\r\n    }\r\n\r\n    fetchAllRoles(pageRole = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_ROLES}?${PARAM_PAGE}${pageRole}`)\r\n        .then(resultRolefetch => this.setState({resultRolefetch: resultRolefetch.data}))\r\n        .catch(errorRolefetch => this.setState({errorRolefetch}));\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n        .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n        .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignRole(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedRole = document.getElementById('roleid').value;\r\n\r\n        axios.get(`${PATHBASE}${PATH_ASSIGNUSERROLES}/${selectedUser}/${selectedRole}`)\r\n        .then(resultRoleAssign => this.setState({resultRoleAssign: resultRoleAssign.data}))\r\n        .catch(errorRoleAssign=> this.setState({errorRoleAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllRoles();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultRolefetch,errorRolefetch,resultUserfetch,errorUserfetch,resultRoleassignSuccess,resultRoleassignError,\r\n            pageRole = 0, pageUser = 0,searchUser,searchRole,\r\n            resultRoleAssign,errorRoleAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING Roles</span>\r\n\r\n                 {resultRoleAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Role Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorRoleAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchRole: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Role</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllRoles(pageRole - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllRoles(pageRole + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"roleid\">\r\n                             {resultRolefetch ?\r\n                              resultRolefetch.content.filter(searchForRole(searchRole)).map(role => (\r\n                                <option value={role.roleid}>{role.rolename}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.assignRole}>\r\n                                Assign Role\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignRoles","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js",["96"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PARAM_PAGE,PATH_DELETE_ROLE,\r\n    PATH_PATCH_EDIT_ROLE,PATH_GET_ROLES,PATH_ADD_ROLE} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n\r\n    \r\n\r\nclass ViewRoles extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //attributes on roles fetched\r\n            result:null,\r\n            error:null,\r\n\r\n            //attributes on roles deleted\r\n            resultDel: null,\r\n            errorDel: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n\r\n            //values to changestate on edit clicked\r\n            role_id:'',\r\n            role_name:'',\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n            addRoleShowModal:false,\r\n\r\n            //values to changestate on adding a new role\r\n            rolename:'',\r\n\r\n            //attributes on roles updated\r\n            onUpdateSuccess: null,\r\n            onUpdateError:null,\r\n\r\n            //attributes on roles added\r\n            resultRolepost:null,\r\n            errorRolepost:null,\r\n\r\n        }\r\n\r\n        this.fetchAllRoles = this.fetchAllRoles.bind(this);\r\n        this.onEditRole = this.onEditRole.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.updateRole = this.updateRole.bind(this);\r\n        this.addRoletoDB = this.addRoletoDB.bind(this);\r\n    }\r\n\r\n    fetchAllRoles(page = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_ROLES}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}));\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_ROLE}/${id}`)\r\n             .then(resultDel => this.setState({resultDel: resultDel.data}))\r\n             .then(errorDel => this.setState({errorDel}))\r\n    \r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    onEditRole(id,name){\r\n        this.setState({\r\n            role_id: id,\r\n            role_name: name\r\n        })\r\n\r\n        this.setState({\r\n            showModal:true\r\n        })\r\n    }\r\n\r\n    updateRole(){\r\n        const{role_id,role_name} = this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n        axios({\r\n            method: 'patch',\r\n            url: `${PATHBASE}${PATH_PATCH_EDIT_ROLE}`,\r\n            data: {\r\n                roleid: role_id,\r\n                rolename: role_name,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n        .catch(onUpdateError => this.setState({onUpdateError}));\r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    showaddRoleModal(){\r\n        this.setState({\r\n            addRoleShowModal:true,\r\n        })\r\n    }\r\n\r\n    addRoletoDB(){\r\n        const{rolename} = this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: `${PATHBASE}${PATH_ADD_ROLE}`,\r\n            data: {\r\n                rolename: rolename,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(resultRolepost => this.setState({resultRolepost: resultRolepost.data}))\r\n        .catch(errorRolepost => this.setState({errorRolepost}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,page = 0,show,\r\n             resultDel,errorDel,showModal,role_name,\r\n             onUpdateSuccess,onUpdateError,addRoleShowModal,\r\n             rolename,resultRolepost,errorRolepost} = this.state;\r\n        return(\r\n           <Container fluid>\r\n               {error?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful Fetching Roles</Alert.Heading>\r\n                  <p>Server might be down or currently not available</p>\r\n               </Alert> \r\n                : null\r\n               }\r\n\r\n              {errorDel?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful Operation Deleting Role</Alert.Heading>\r\n                  <p>Server might be down or currently not available</p>\r\n               </Alert> \r\n                : null\r\n               }\r\n\r\n                {resultDel?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Role Deleted Successfully</Alert.Heading>\r\n               </Alert> \r\n                : null\r\n                }\r\n\r\n                {/* add role button clicked  show modal*/}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showaddRoleModal()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add New Role</span>  \r\n                </Button>\r\n\r\n                {/* modal content to add a new role */}\r\n                <Modal size=\"lg\" show={addRoleShowModal} onHide={() => this.setState({addRoleShowModal: false})} centered>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Add Role</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      {resultRolepost?\r\n                        <Alert show={show} variant=\"success\" onClose={(event) => this.setState({addRoleShowModal:false})} dismissible>\r\n                          <Alert.Heading>Role Added Successfully</Alert.Heading>\r\n                        </Alert> \r\n                        : null\r\n                      }\r\n                      {errorRolepost?\r\n                        <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({addRoleShowModal:false})} dismissible>\r\n                          <Alert.Heading>Unsuccessful operation adding Role</Alert.Heading>\r\n                          <p>Server might be down: or not available currently</p>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Rolename</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter rolename here\" onChange={(e) => this.setState({rolename : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.addRoletoDB}>\r\n                                      AddRole\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n               {result?\r\n                 <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                 <thead>\r\n                     <tr>\r\n                         <th>ROLE NAMES</th>\r\n                         <th>ACTION</th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tbody>\r\n                     {result.content.map(role => \r\n                         <tr key={role.roleid}>\r\n                             <td>{role.rolename}</td>\r\n                             <td>\r\n                                 <Button variant=\"secondary mx-1\" onClick={() => this.onEditRole(\r\n                                    role.roleid,role.rolename\r\n                                 )}>\r\n                                   <FontAwesomeIcon icon={faEdit}/>\r\n                                 </Button>\r\n                                 <Button variant=\"danger mx-1\" onClick={() => this.onDelete(role.roleid)}>\r\n                                   <FontAwesomeIcon icon={faTrash}/>\r\n                                 </Button>\r\n                             </td>\r\n                         </tr>\r\n                      )\r\n                     }\r\n                 </tbody>\r\n               </Table>\r\n              : null\r\n             }\r\n             <Button variant=\"primary\" onClick={() => this.fetchAllRoles(page - 1)}>\r\n                 <FontAwesomeIcon icon={faArrowLeft}/>\r\n                 Prev\r\n             </Button>\r\n             <Button variant=\"primary mx-3\" onClick={() => this.fetchAllRoles(page + 1)}>\r\n                <FontAwesomeIcon icon={faArrowRight}/>\r\n                 Next\r\n             </Button>\r\n\r\n             {/* On edit button clicked show modal */}\r\n             <Modal size=\"lg\" show={showModal} onHide={() => this.setState({showModal: false})} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit Role</Modal.Title>\r\n                </Modal.Header>\r\n                {onUpdateSuccess?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Role Updated Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {onUpdateError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful operation updating Role</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Modal.Body>\r\n                    <Container fluid>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Rolename</Form.Label>\r\n                                    <Form.Control type=\"text\" value={role_name} onChange={(e) => this.setState({role_name : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col className=\"mt-2\">\r\n                                  <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateRole}>\r\n                                    UpdateDetails\r\n                                  </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Container>\r\n                </Modal.Body>\r\n             </Modal>\r\n           </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewRoles","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js",["97","98"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PATH_GETALL_DESIGNATION,PATH_ADD_DESIGNATION,PATH_DELETE_DESIGNATION,\r\n    PARAM_PAGE,PATH_GET_DEPARTMENT,PATH_PATCH_DESIGNATION} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass ViewDesignations extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //result from fetching designations\r\n            result: null,\r\n            error: null, \r\n\r\n            //result from fetchingn departments\r\n            deptResult:null,\r\n            deptError:null,\r\n\r\n            //result objects on designation deleted\r\n            deleteDesSuccess:null,\r\n            deleteDesFailure:null,\r\n\r\n            //result object on designation updated\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n\r\n            //result on adding new designation\r\n            addResult:null,\r\n            addError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n            showforUpdateAlert:true,\r\n            showforAddDesignation:true,\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n            showAddModal:false,\r\n            \r\n            //values to edit on editClicked\r\n            id: '',\r\n            designationname:'',\r\n            departmentid: '',\r\n            departmentcode: '',\r\n            departmentname: '',\r\n\r\n            //values to changeState when adding new designation\r\n            designationnamenew:'',\r\n        }\r\n\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onEditDesignation = this.onEditDesignation.bind(this);\r\n        this.updateDesignation = this.updateDesignation.bind(this);\r\n        this.showAddDesignation = this.showAddDesignation.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.addDesignationtoDB = this.addDesignationtoDB.bind(this);\r\n    }\r\n\r\n    fetchAllDesignations(page = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}))\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n        .then(deptResult => this.setState({deptResult: deptResult.data}))\r\n        .catch(deptError => this.setState({deptError}));\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_DESIGNATION}/${id}`)\r\n             .then(deleteDesSuccess => this.setState({deleteDesSuccess : deleteDesSuccess.data}))\r\n             .catch(deleteDesFailure => this.setState({deleteDesFailure}))\r\n    }\r\n\r\n    onEditDesignation(desid,desname ,desdeptid,desdeptcode,desdeptname){\r\n        this.setState({\r\n            id: desid,\r\n            designationname: desname,\r\n            departmentid: desdeptid,\r\n            departmentcode: desdeptcode,\r\n            departmentname: desdeptname,\r\n        })\r\n\r\n        this.setState({\r\n            showModal:true,\r\n        })\r\n    }\r\n\r\n    updateDesignation(){\r\n        const{id,designationname,departmentid,departmentcode,departmentname}=this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n        axios({\r\n            method: 'patch',\r\n            url: `${PATHBASE}${PATH_PATCH_DESIGNATION}`,\r\n            data: {\r\n                id: id,\r\n                designationname: designationname,\r\n                department: {\r\n                    id:departmentid ,\r\n                    departmentid:departmentcode,\r\n                    departmentname: departmentname\r\n                }\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n        .catch(onUpdateError => this.setState({onUpdateError}));\r\n\r\n        this.fetchAllDesignations();\r\n    }\r\n\r\n     addDesignationtoDB(){\r\n          const{designationnamenew} = this.state; \r\n          let selectedDepartment = document.getElementById('deptid').value;\r\n\r\n          axios.get(`${PATHBASE}${PATH_ADD_DESIGNATION}/${designationnamenew}/${selectedDepartment}`)\r\n               .then(addResult => this.setState({addResult: addResult.data}))\r\n               .catch(addError => this.setState({addError})); \r\n    }\r\n\r\n    showAddDesignation(){\r\n        this.setState({\r\n            showAddModal:true,\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDesignations();\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,page = 0,deleteDesFailure,deleteDesSuccess,show,\r\n            showModal,showAddModal, designationname, onUpdateSuccess,onUpdateError,\r\n            showforUpdateAlert,designationnamenew,pageDept = 0,deptResult,\r\n            deptError,addResult,addError,showforAddDesignation} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {deleteDesFailure?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Unsuccessful Deleting designation</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {deleteDesSuccess?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Designation deleted successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {/* Button to show add new designation================================================ */}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showAddDesignation()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add Designation</span>  \r\n                </Button>\r\n                {/* Button to show add new designation================================================ */}\r\n\r\n                {/* add new designation=============================================================== */}\r\n                <Modal show={showAddModal} size=\"lg\" onHide={() => this.setState({showAddModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New  Designation</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {addError?\r\n                            <Alert show={showforAddDesignation} variant=\"danger\" onClose={(event) => this.setState({showforAddDesignation:false})} dismissible>\r\n                              <Alert.Heading>Unsuccessful creating new designation</Alert.Heading>\r\n                              <p>Server might be down or currently not available</p>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n\r\n                          {addResult?\r\n                            <Alert show={showforAddDesignation} variant=\"success\" onClose={(event) => this.setState({showforAddDesignation:false})} dismissible>\r\n                              <Alert.Heading>Designation created successfully</Alert.Heading>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Designation Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={designationnamenew} onChange={(e) => this.setState({designationnamenew : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"mt-4 mb-2\">\r\n                                <Col>\r\n                                    <Form.Label>Select Department</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                               <Col className=\"mt-2 mb-2\">\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                 <Form.Control as=\"select\" id=\"deptid\">\r\n                                {deptResult ?\r\n                                 deptResult.content.map(department => (\r\n                                    <option value={department.id}>{department.departmentname}</option>\r\n                                  ))\r\n                                 : null\r\n                                 }   \r\n                            </Form.Control>\r\n                            </Form.Row>\r\n                             <Form.Row className=\"mt-4\">\r\n                                    <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.addDesignationtoDB()}>\r\n                                        Add Designation  \r\n                                    </Button>\r\n                             </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* add new designation=============================================================== */}\r\n\r\n                {/* on edit clicked show modal populated with table values */}\r\n                <Modal show={showModal} size=\"lg\" onHide={() => this.setState({showModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit Designation </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {onUpdateError?\r\n                            <Alert show={showforUpdateAlert} variant=\"danger\" onClose={(event) => this.setState({showforUpdateAlert:false})} dismissible>\r\n                              <Alert.Heading>Unsuccessful Updating designation</Alert.Heading>\r\n                              <p>Server might be down or currently not available</p>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n\r\n                          {onUpdateSuccess?\r\n                            <Alert show={showforUpdateAlert} variant=\"success\" onClose={(event) => this.setState({showforUpdateAlert:false})} dismissible>\r\n                              <Alert.Heading>Designation updated successfully</Alert.Heading>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Change Designation Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={designationname} onChange={(e) => this.setState({designationname : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateDesignation}>\r\n                                        Update Designation  \r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* end line of on edit clicked button =====================*/}\r\n\r\n                {result?\r\n                    <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                 <thead>\r\n                     <tr>\r\n                         <th>DESIGNATION NAME</th>\r\n                         <th>DEPARTMENT</th>\r\n                         <th>ACTION</th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tbody>\r\n                     {result.content.map(designation => \r\n                         <tr key={designation.id}>\r\n                             <td>{designation.designationname}</td>\r\n                             <td>{designation.department.departmentname}</td>\r\n                             <td>\r\n                                 <Button variant=\"secondary mx-1\" onClick={() => this.onEditDesignation(\r\n                                    designation.id,designation.designationname ,\r\n                                    designation.department.id,designation.department.departmentid,\r\n                                    designation.department.departmentname\r\n                                 )}>\r\n                                   <FontAwesomeIcon icon={faEdit}/>\r\n                                 </Button>\r\n                                 <Button variant=\"danger mx-1\" onClick={() => this.onDelete(designation.id)}>\r\n                                   <FontAwesomeIcon icon={faTrash}/>\r\n                                 </Button>\r\n                             </td>\r\n                         </tr>\r\n                      )\r\n                     }\r\n                 </tbody>\r\n               </Table>\r\n              : null\r\n                }\r\n              <Button variant=\"primary\" onClick={() => this.fetchAllDesignations(page - 1)}>\r\n                  <FontAwesomeIcon icon={faArrowLeft}/>\r\n                   Prev\r\n              </Button>\r\n              <Button variant=\"primary mx-3\" onClick={() => this.fetchAllDesignations(page + 1)}>\r\n                <FontAwesomeIcon icon={faArrowRight}/>\r\n                 Next\r\n             </Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewDesignations","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js",["99","100","101","102","103","104","105"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GETALL_DESIGNATION,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSERDESIGNATION} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus, faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForDesignation = searchDesignation => designation =>\r\n    designation.designationname.toLowerCase().includes(searchDesignation.toLowerCase());\r\n\r\nclass AssignDesignations extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchDesignation: '',\r\n\r\n             //fetch designation objects\r\n             resultDesignationfetch: null,\r\n             errorDesignationfetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign designation objects\r\n             resultDesignationAssign: null,\r\n             errorDesignationAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.assignUserDesignation = this.assignUserDesignation.bind(this);\r\n    }\r\n\r\n    fetchAllDesignations(pageDesignation = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${pageDesignation}`)\r\n             .then(resultDesignationfetch => this.setState({resultDesignationfetch: resultDesignationfetch.data}))\r\n             .catch(errorDesignationfetch => this.setState({errorDesignationfetch}))\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n             .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n             .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignUserDesignation(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedDesignation = document.getElementById('designationId').value;\r\n\r\n        axios.post(`${PATHBASE}${PATH_ASSIGNUSERDESIGNATION}/${selectedUser}/${selectedDesignation}`)\r\n             .then(resultDesignationAssign => this.setState({resultDesignationAssign: resultDesignationAssign.data}))\r\n             .catch(errorDesignationAssign=> this.setState({errorDesignationAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDesignations();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultDesignationfetch,errorDesignationfetch,resultUserfetch,errorUserfetch,resultDesignationAssignSuccess,resultDesignationAssignError,\r\n            pageDesignation = 0, pageUser = 0,searchUser,searchDesignation,\r\n            resultDesignationAssign,errorDesignationAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING DESIGNATIONS</span>\r\n                 {resultDesignationAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Designation Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorDesignationAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning User to Designation</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchDesignation: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Designation</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"designationId\">\r\n                             {resultDesignationfetch ?\r\n                              resultDesignationfetch.content.filter(searchForDesignation(searchDesignation)).map(designation => (\r\n                                <option value={designation.id}>{designation.designationname}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.assignUserDesignation()}>\r\n                                Assign Designation\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignDesignations","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js",["106","107","108","109","110","111","112"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GET_DEPARTMENT,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSER_DEPARTMENT} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus,faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForDepartment = searchDepartment => department =>\r\n    department.departmentname.toLowerCase().includes(searchDepartment.toLowerCase());\r\n\r\nclass AssignDepartments extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchDepartment: '',\r\n\r\n             //fetch department objects\r\n             resultDeptfetch: null,\r\n             errorDeptfetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign role objects\r\n             resultDeptAssign: null,\r\n             errorDeptAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.assignDepartment = this.assignDepartment.bind(this);\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n            .then(resultDeptfetch => this.setState({resultDeptfetch: resultDeptfetch.data}))\r\n            .catch(errorDeptfetch => this.setState({errorDeptfetch}));\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n        .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n        .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignDepartment(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedDepartment = document.getElementById('deptid').value;\r\n\r\n        axios.get(`${PATHBASE}${PATH_ASSIGNUSER_DEPARTMENT}/${selectedUser}/${selectedDepartment}`)\r\n        .then(resultDeptAssign => this.setState({resultDeptAssign: resultDeptAssign.data}))\r\n        .catch(errorDeptAssign=> this.setState({errorDeptAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDepartments();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultDeptfetch,errorDeptfetch,resultUserfetch,errorUserfetch,resultDeptAssignSuccess,resultDeptAssignError,\r\n            pageDept = 0, pageUser = 0,searchUser,searchDepartment,\r\n            resultDeptAssign,errorDeptAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING Departments</span>\r\n\r\n                 {resultDeptAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Department Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorDeptAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning Department</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchDepartment: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Department</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"deptid\">\r\n                             {resultDeptfetch ?\r\n                              resultDeptfetch.content.filter(searchForDepartment(searchDepartment)).map(department => (\r\n                                <option value={department.id}>{department.departmentid} - {department.departmentname}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.assignDepartment()}>\r\n                                Assign Department\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignDepartments","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js",["113"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PARAM_PAGE,PATH_GETALL_BENEFITS,PATH_GETALL_DESIGNATION,PATH_POST_BENEFIT\r\n    ,PATH_DELETE_BENEFIT,NO_OF_DESIGNATIONS,PATH_GET_DEPARTMENT} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n    \r\n\r\nclass ViewBenefits extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n           //attributes on benefits fetch \r\n           result: null,\r\n           error: null,  \r\n\r\n           //attributes to change state adding new benefit\r\n           benefitname: '',\r\n           calculatedamount:'',\r\n           percentageonCalcamount: '',\r\n           flatamount:'',\r\n           designation:'',\r\n\r\n           //checkbox state to activate  flatamount\r\n            flatamountradiobtn:false,\r\n            calculatedamoutradiobtn:false,\r\n\r\n           //attributes on benefit deleted\r\n           resultOndelete:null,\r\n           errorOndelete:null,\r\n\r\n           //attributes on department  fetched\r\n           resultDept:null,\r\n           errorDept:null,\r\n\r\n           //attributes on designation fetched\r\n           resultDesignation:null,\r\n           errorDesignation:null,\r\n\r\n           //alert attributes\r\n           fetchbenefitsShow:true,\r\n           deletebenefitShow:true,\r\n           postbenefitShow:true,\r\n\r\n           //modal attributes to add benefit\r\n           showModal:false,\r\n\r\n           //multiple select attribute\r\n           selectedDesignations:'',\r\n           selectedDepartments: '',\r\n\r\n           //posting benefits to db result objects\r\n           onPostSuccess:null,\r\n           onPostFailure:null,\r\n        }\r\n\r\n        this.fetchAllBenefits = this.fetchAllBenefits.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.showaddBenefitModal = this.showaddBenefitModal.bind(this);\r\n        this.addBenefittoDB = this.addBenefittoDB.bind(this);\r\n        this.multipleselectHandler =this.multipleselectHandler.bind(this);\r\n        this.multipleselectHandlerDept = this.multipleselectHandlerDept.bind(this);\r\n        this.clearModalFields = this.clearModalFields.bind(this);\r\n    }\r\n\r\n    fetchAllBenefits(page = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_BENEFITS}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}));\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n             .then(resultDept => this.setState({resultDept: resultDept.data}))\r\n             .catch(errorDept => this.setState({errorDept}));\r\n    }\r\n\r\n    fetchAllDesignations(pageDesignation = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${pageDesignation}`)\r\n             .then(resultDesignation => this.setState({resultDesignation: resultDesignation.data}))\r\n             .catch(errorDesignation => this.setState({errorDesignation}))\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_BENEFIT}/${id}`)\r\n             .then(resultOndelete => this.setState({resultOndelete: resultOndelete.data}))\r\n             .catch(errorOndelete => this.setState({errorOndelete}))\r\n        this.fetchAllBenefits();\r\n    }\r\n\r\n    showaddBenefitModal(){\r\n        this.setState({\r\n            showModal:true,\r\n        })\r\n    }\r\n\r\n    multipleselectHandler(event){\r\n        const selected=[];\r\n        let selectedOption = (event.target.selectedOptions);\r\n\r\n        for(let i=0; i < selectedOption.length; i++){\r\n            selected.push(selectedOption.item(i).value)\r\n        }\r\n        this.setState({\r\n            selectedDesignations:selected\r\n        })\r\n    }\r\n\r\n    multipleselectHandlerDept(event){\r\n        const selectedDept=[];\r\n        let selectedOption = (event.target.selectedOptions);\r\n\r\n        for(let i=0; i < selectedOption.length; i++){\r\n            selectedDept.push(selectedOption.item(i).value)\r\n        }\r\n        this.setState({\r\n            selectedDepartments:selectedDept\r\n        })\r\n    }\r\n\r\n    addBenefittoDB(){\r\n        const{benefitname,calculatedamount,flatamount,\r\n        percentageonCalcamount,selectedDesignations,selectedDepartments} = this.state;\r\n        \r\n        let selectedFrequency = document.getElementById('frequencyId').value;\r\n        let computationsonCalculatedAmount = ((+percentageonCalcamount/100) * +calculatedamount)\r\n\r\n         ///test/benefit/{benefitname}/{calculatedamount}/{flatamount}/{frequency}/{percentagevalue}/{departments}\r\n        axios.post(`${PATHBASE}${PATH_POST_BENEFIT}/${benefitname}/${computationsonCalculatedAmount}/${flatamount}/\r\n              ${selectedFrequency}/${percentageonCalcamount}/${selectedDepartments}?${NO_OF_DESIGNATIONS}${selectedDesignations}`) \r\n             .then(onPostSuccess => this.setState({onPostSuccess: onPostSuccess.data}))\r\n             .catch(onPostFailure => this.setState({onPostFailure}));    \r\n    }\r\n\r\n    clearModalFields(){\r\n        this.setState({\r\n            benefitname: '',\r\n            calculatedamount:'',\r\n            percentageonCalcamount: '',\r\n            flatamount:'',\r\n            designation:'',\r\n            flatamountradiobtn:false,\r\n            calculatedamoutradiobtn:false,\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.fetchAllBenefits();\r\n        this.fetchAllDesignations();\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,fetchbenefitsShow,page = 0,resultOndelete,\r\n              errorOndelete,deletebenefitShow,showModal,pageDept = 0,\r\n              pageDesignation = 0,benefitname,calculatedamount,flatamount,\r\n              flatamountradiobtn,calculatedamoutradiobtn,percentageonCalcamount,\r\n              resultDesignation,resultDept,onPostSuccess,onPostFailure,\r\n              postbenefitShow} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {error?\r\n                <Alert show={fetchbenefitsShow} variant=\"danger\" onClose={(event) => this.setState({fetchbenefitsShow:false})} dismissible>\r\n                  <Alert.Heading>Error fetching Benefits</Alert.Heading>\r\n                  <p>Server might be down: or Currently unavailable</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {errorOndelete?\r\n                <Alert show={deletebenefitShow} variant=\"danger\" onClose={(event) => this.setState({deletebenefitShow:false})} dismissible>\r\n                  <Alert.Heading>Error deleting Benefit</Alert.Heading>\r\n                  <p>Server might be down: or Currently unavailable</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {resultOndelete?\r\n                <Alert show={deletebenefitShow} variant=\"success\" onClose={(event) => this.setState({deletebenefitShow:false})} dismissible>\r\n                  <Alert.Heading>Benefit deleted successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {/* add benefit button clicked  show modal=============================================*/}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showaddBenefitModal()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add New Benefit</span>  \r\n                </Button>\r\n                {/* add benefit button clicked  show modal=============================================*/}\r\n\r\n                {/* modal to add new benefit========================================================== */}\r\n                <Modal size=\"lg\" show={showModal} onHide={() => this.setState({showModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Benefit</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {onPostFailure?\r\n                             <Alert show={postbenefitShow} variant=\"danger\" onClose={(event) => this.setState({postbenefitShow:false})} dismissible>\r\n                             <Alert.Heading>Error Creating Benefit</Alert.Heading>\r\n                             <p>Server might be down: or Currently unavailable</p>\r\n                             </Alert> \r\n                            : null\r\n                         }\r\n                         {onPostSuccess?\r\n                             <Alert show={postbenefitShow} variant=\"success\" onClose={(event) => this.setState({postbenefitShow:false})} dismissible>\r\n                              <Alert.Heading>Benefit Created Successfully</Alert.Heading>\r\n                             </Alert> \r\n                            : null\r\n                         }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Benefit Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={benefitname} onChange={(e) => this.setState({benefitname : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Amount</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col md={3}>\r\n                                    <Form.Check type=\"radio\" name=\"amountradiobtn\" id=\"flatamountradbtn\" onChange={(e) => this.setState({flatamountradiobtn : e.target.value, calculatedamoutradiobtn:false})}/>\r\n                                    <Form.Label>Flat Amount</Form.Label>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Check type=\"radio\" name=\"amountradiobtn\" id=\"calcamountradbtn\" onChange={(e) => this.setState({calculatedamoutradiobtn : e.target.value, flatamountradiobtn:false})}/>\r\n                                    <Form.Label>Calculated Amount</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            {flatamountradiobtn?\r\n                                <Form.Row>\r\n                                    <Col>\r\n                                        <Form.Control type=\"text\" value={flatamount} onChange={(e) => this.setState({flatamount : e.target.value, calculatedamount: '0',percentageonCalcamount:'0'})}/>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                                :null\r\n                            }\r\n                            {calculatedamoutradiobtn?\r\n                                <Form.Row>\r\n                                    <Col>\r\n                                        <Form.Label>Amount</Form.Label>\r\n                                        <Form.Control value={calculatedamount} onChange={(e) => this.setState({calculatedamount : e.target.value, flatamount: '0'})}/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>% on Amount</Form.Label>\r\n                                        <Form.Control value={percentageonCalcamount} onChange={(e) => this.setState({percentageonCalcamount : e.target.value})}/>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                                :null\r\n                            }\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Frequency</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Form.Control as=\"select\" id=\"frequencyId\">\r\n                                       <option value=\"1month\">1month</option>\r\n                                       <option value=\"2months\">2months</option>\r\n                                       <option value=\"3months\">3months</option>\r\n                                       <option value=\"4months\">4months</option>\r\n                                       <option value=\"5months\">5months</option>\r\n                                       <option value=\"6months\">6months</option>\r\n                                       <option value=\"7months\">7months</option>\r\n                                       <option value=\"8months\">8months</option>\r\n                                       <option value=\"9months\">9months</option>\r\n                                       <option value=\"10months\">10months</option>\r\n                                       <option value=\"11months\">11months</option>\r\n                                       <option value=\"12months\">12months</option>\r\n                                  </Form.Control>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"my-2\">\r\n                               <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Select Designation(s)</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                 <Col>\r\n                                    <Form.Control as=\"select\" multiple id=\"designationId\" onChange={this.multipleselectHandler}>\r\n                                    {resultDesignation ?\r\n                                        resultDesignation.content.map(designation => (\r\n                                        <option value={designation.id}>{designation.designationname}</option>\r\n                                        ))\r\n                                         : null\r\n                                     }   \r\n                                    </Form.Control>\r\n                                 </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"my-2\">\r\n                               <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                     <Form.Label>Select Department(s)</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Control as=\"select\" multiple id=\"deptid\" onChange={this.multipleselectHandlerDept}>\r\n                                {resultDept ?\r\n                                 resultDept.content.map(department => (\r\n                                   <option value={department.id}>{department.departmentname}</option>\r\n                                 ))\r\n                                : null\r\n                                }   \r\n                                </Form.Control>\r\n                            </Form.Row>\r\n                        </Form>\r\n                        <Form.Row>\r\n                            <Col>\r\n                               <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\"  onClick={this.addBenefittoDB}>\r\n                                        Add Benefit  \r\n                               </Button>\r\n                               <Button variant=\"warning mt-2 mx-4\"  type=\"button\" size=\"lg\"  onClick={this.clearModalFields}>\r\n                                        Clear  \r\n                               </Button>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* modal to add new benefit========================================================== */}\r\n\r\n                {result?\r\n                       <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                       <thead>\r\n                           <tr>\r\n                               <th>BENEFIT NAMES</th>\r\n                               <th>FREQUENCY</th>\r\n                               <th>AMOUNT FLAT</th>\r\n                               <th>AMOUNT CALCULATED</th>\r\n                               <th>DESIGNATION NAME</th>\r\n                               <th>DESIGNATION DEPT NAME</th>\r\n                               <th>DEPARTMENT NAMES</th>\r\n                               <th>ACTION</th>\r\n                           </tr>\r\n                       </thead>\r\n                       <tbody>\r\n                           {result.content.map(benefit => \r\n                                   <tr key={benefit.id}>\r\n                                   <td>{benefit.benefitname}</td>\r\n                                   <td>{benefit.frequency}</td>\r\n                                   <td>{benefit.flatamount}</td>\r\n                                   <td>{benefit.calculatedamount}</td>\r\n                                   <td>{benefit.designation?\r\n                                        benefit.designation.designationname\r\n                                        :null\r\n                                       }\r\n                                   </td>\r\n                                   <td>{benefit.designation?\r\n                                        benefit.designation.department.departmentname\r\n                                        :null\r\n                                      }\r\n                                   </td>\r\n                                   <td>{benefit.department?\r\n                                       benefit.department.departmentname\r\n                                       :null\r\n                                      }\r\n                                    </td>\r\n                                   <td>\r\n                                       <Button variant=\"danger mx-1\" onClick={() => this.onDelete(benefit.id)}>\r\n                                           <FontAwesomeIcon icon={faTrash}/>\r\n                                       </Button>\r\n                                   </td>\r\n                               </tr>\r\n                               )\r\n                           }\r\n                       </tbody>\r\n                       </Table>\r\n                       : null\r\n                       }\r\n                       <Button variant=\"primary\" onClick={() => this.fetchAllBenefits(page - 1)}>\r\n                           <FontAwesomeIcon icon={faArrowLeft}/>\r\n                           Prev\r\n                       </Button>\r\n                       <Button variant=\"primary mx-3\" onClick={() => this.fetchAllBenefits(page + 1)}>\r\n                       <FontAwesomeIcon icon={faArrowRight}/>\r\n                          Next\r\n                       </Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewBenefits","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":13},{"ruleId":"118","severity":1,"message":"122","line":43,"column":17,"nodeType":"120","messageId":"121","endLine":43,"endColumn":20},{"ruleId":"118","severity":1,"message":"122","line":49,"column":17,"nodeType":"120","messageId":"121","endLine":49,"endColumn":20},{"ruleId":"118","severity":1,"message":"123","line":2,"column":21,"nodeType":"120","messageId":"121","endLine":2,"endColumn":30},{"ruleId":"118","severity":1,"message":"124","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":18},{"ruleId":"118","severity":1,"message":"125","line":3,"column":19,"nodeType":"120","messageId":"121","endLine":3,"endColumn":28},{"ruleId":"118","severity":1,"message":"126","line":3,"column":29,"nodeType":"120","messageId":"121","endLine":3,"endColumn":40},{"ruleId":"118","severity":1,"message":"127","line":61,"column":30,"nodeType":"120","messageId":"121","endLine":61,"endColumn":36},{"ruleId":"118","severity":1,"message":"128","line":7,"column":35,"nodeType":"120","messageId":"121","endLine":7,"endColumn":41},{"ruleId":"118","severity":1,"message":"129","line":7,"column":42,"nodeType":"120","messageId":"121","endLine":7,"endColumn":49},{"ruleId":"118","severity":1,"message":"130","line":7,"column":50,"nodeType":"120","messageId":"121","endLine":7,"endColumn":56},{"ruleId":"118","severity":1,"message":"131","line":72,"column":31,"nodeType":"120","messageId":"121","endLine":72,"endColumn":45},{"ruleId":"118","severity":1,"message":"132","line":72,"column":62,"nodeType":"120","messageId":"121","endLine":72,"endColumn":76},{"ruleId":"118","severity":1,"message":"133","line":72,"column":77,"nodeType":"120","messageId":"121","endLine":72,"endColumn":100},{"ruleId":"118","severity":1,"message":"134","line":72,"column":101,"nodeType":"120","messageId":"121","endLine":72,"endColumn":122},{"ruleId":"118","severity":1,"message":"135","line":127,"column":14,"nodeType":"120","messageId":"121","endLine":127,"endColumn":22},{"ruleId":"118","severity":1,"message":"136","line":139,"column":22,"nodeType":"120","messageId":"121","endLine":139,"endColumn":27},{"ruleId":"118","severity":1,"message":"137","line":142,"column":13,"nodeType":"120","messageId":"121","endLine":142,"endColumn":22},{"ruleId":"118","severity":1,"message":"128","line":7,"column":35,"nodeType":"120","messageId":"121","endLine":7,"endColumn":41},{"ruleId":"118","severity":1,"message":"129","line":7,"column":42,"nodeType":"120","messageId":"121","endLine":7,"endColumn":49},{"ruleId":"118","severity":1,"message":"130","line":7,"column":50,"nodeType":"120","messageId":"121","endLine":7,"endColumn":56},{"ruleId":"118","severity":1,"message":"138","line":72,"column":38,"nodeType":"120","messageId":"121","endLine":72,"endColumn":59},{"ruleId":"118","severity":1,"message":"132","line":72,"column":76,"nodeType":"120","messageId":"121","endLine":72,"endColumn":90},{"ruleId":"118","severity":1,"message":"139","line":72,"column":91,"nodeType":"120","messageId":"121","endLine":72,"endColumn":121},{"ruleId":"118","severity":1,"message":"140","line":72,"column":122,"nodeType":"120","messageId":"121","endLine":72,"endColumn":150},{"ruleId":"118","severity":1,"message":"128","line":7,"column":35,"nodeType":"120","messageId":"121","endLine":7,"endColumn":41},{"ruleId":"118","severity":1,"message":"129","line":7,"column":42,"nodeType":"120","messageId":"121","endLine":7,"endColumn":49},{"ruleId":"118","severity":1,"message":"130","line":7,"column":50,"nodeType":"120","messageId":"121","endLine":7,"endColumn":56},{"ruleId":"118","severity":1,"message":"141","line":72,"column":31,"nodeType":"120","messageId":"121","endLine":72,"endColumn":45},{"ruleId":"118","severity":1,"message":"132","line":72,"column":62,"nodeType":"120","messageId":"121","endLine":72,"endColumn":76},{"ruleId":"118","severity":1,"message":"142","line":72,"column":77,"nodeType":"120","messageId":"121","endLine":72,"endColumn":100},{"ruleId":"118","severity":1,"message":"143","line":72,"column":101,"nodeType":"120","messageId":"121","endLine":72,"endColumn":122},{"ruleId":"118","severity":1,"message":"128","line":7,"column":35,"nodeType":"120","messageId":"121","endLine":7,"endColumn":41},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","'Jumbotron' is defined but never used.","'CardDeck' is defined but never used.","'CardGroup' is defined but never used.","'CardColumns' is defined but never used.","'result' is assigned a value but never used.","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'faPlus' is defined but never used.","'errorRolefetch' is assigned a value but never used.","'errorUserfetch' is assigned a value but never used.","'resultRoleassignSuccess' is assigned a value but never used.","'resultRoleassignError' is assigned a value but never used.","'rolename' is assigned a value but never used.","'error' is assigned a value but never used.","'deptError' is assigned a value but never used.","'errorDesignationfetch' is assigned a value but never used.","'resultDesignationAssignSuccess' is assigned a value but never used.","'resultDesignationAssignError' is assigned a value but never used.","'errorDeptfetch' is assigned a value but never used.","'resultDeptAssignSuccess' is assigned a value but never used.","'resultDeptAssignError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]