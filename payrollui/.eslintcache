[{"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\index.js":"1","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\App.js":"2","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js":"3","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js":"4","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js":"5","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js":"6","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js":"7","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js":"8","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\usersmainTab.js":"9","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js":"10","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\rolesmainTab.js":"11","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js":"12","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\designationmainTab.js":"13","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\departmentmainTab.js":"14","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js":"15","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js":"16","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js":"17","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js":"18","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\userdetails.js":"19","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js":"20","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js":"21","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\benefitmainTab.js":"22","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js":"23","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\apiCalls.js":"24"},{"size":547,"mtime":1612002297887,"results":"25","hashOfConfig":"26"},{"size":525,"mtime":1612371110007,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":567,"mtime":1612389696310,"results":"29","hashOfConfig":"26"},{"size":7133,"mtime":1612518746803,"results":"30","hashOfConfig":"26"},{"size":8955,"mtime":1613301267484,"results":"31","hashOfConfig":"26"},{"size":22819,"mtime":1612867422111,"results":"32","hashOfConfig":"26"},{"size":10709,"mtime":1612033833441,"results":"33","hashOfConfig":"26"},{"size":1454,"mtime":1612521359725,"results":"34","hashOfConfig":"26"},{"size":11054,"mtime":1612865399293,"results":"35","hashOfConfig":"26"},{"size":1176,"mtime":1612592842068,"results":"36","hashOfConfig":"26"},{"size":7512,"mtime":1612592874009,"results":"37","hashOfConfig":"26"},{"size":1322,"mtime":1612519479734,"results":"38","hashOfConfig":"26"},{"size":1301,"mtime":1612440260145,"results":"39","hashOfConfig":"26"},{"size":8095,"mtime":1612371110008,"results":"40","hashOfConfig":"26"},{"size":14771,"mtime":1612865327523,"results":"41","hashOfConfig":"26"},{"size":7811,"mtime":1612115212693,"results":"42","hashOfConfig":"26"},{"size":13747,"mtime":1612865312792,"results":"43","hashOfConfig":"26"},{"size":19352,"mtime":1612593726946,"results":"44","hashOfConfig":"26"},{"size":8629,"mtime":1612592894524,"results":"45","hashOfConfig":"26"},{"size":19629,"mtime":1612865290579,"results":"46","hashOfConfig":"26"},{"size":1261,"mtime":1612439805257,"results":"47","hashOfConfig":"26"},{"size":3632,"mtime":1612865399293,"results":"48","hashOfConfig":"26"},{"size":1467,"mtime":1613299823585,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1i3fcnz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\index.js",[],["113","114"],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\App.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js",["115"],"import React,{Component} from 'react'\r\nimport {Switch,Route,Redirect} from 'react-router-dom'\r\n\r\nimport Dashboard from './Dashboard'\r\n/* import UserDetails from '../users/userdetails'  */\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        return(\r\n            <Switch>\r\n                <Route path=\"/main/dashboard\" component={Dashboard}/>\r\n                {/* <Route path=\"/main/viewuserdetails\" component={UserDetails}/> */}\r\n               {/*  <Redirect from=\"*\" to=\"/main/dashboard\"/> */}\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js",["116","117","118","119"],"import React,{Component} from 'react'\r\nimport GoogleLogin from 'react-google-login'\r\nimport axios from 'axios'\r\nimport './loginform.css'\r\nimport {PATHBASE,PATH_ADDUSER,PATH_USER_LOGIN,loginEmail,loginPassword} from '../API_URLS'\r\nimport {Container,Row,Col,Form,Button,Alert} from 'react-bootstrap'\r\n\r\nclass LoginForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n        \r\n         // attributes for creating user credentials if individual\r\n         //logs in with Google Chrome\r\n          address:'',\r\n          city:'',\r\n          email:'',\r\n          employeeid:'',\r\n          employeelevel:'',\r\n          enabled: true,\r\n          password:'',\r\n          phonenumber:'',\r\n          bankaccountnumber:'',\r\n          birthdate:'',\r\n          gender:'',\r\n          hiredate:'',\r\n          maritalstatus:'',\r\n          birthcertid:'',\r\n          driverslicenseid:'',\r\n          passportid:'',\r\n          ssnitid:'',\r\n          votersid:'',\r\n          name:'',\r\n          tier2: '',\r\n          tinnumber:'',\r\n          marriagecertid:'',\r\n          usercreator:'Google',\r\n\r\n          //resultObject for for getRequest\r\n          postRecordSuccess:null,\r\n          postRecordError:null,\r\n\r\n          //basic auth with springsecurity\r\n          errorLogin: null,\r\n          successLogin: null,\r\n\r\n          //error login alert\r\n          showAlert:true,\r\n        \r\n          //login in with google\r\n          buttonText:'Login With Google',\r\n          googlename:null,\r\n          googleemail:null,\r\n          googletoken:null,\r\n          googleProviderId: 'Google',\r\n          onGoogleLoginSuccess: null,\r\n          onGoogleLoginFailure: null,\r\n          clientId: '552767747033-o7fm828mscm2otn5oprkfjjtq3qscqad.apps.googleusercontent.com'\r\n        }\r\n\r\n        this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\r\n    }\r\n\r\n    handleLoginSubmit(event){\r\n        const{successLogin,errorLogin}=this.state;\r\n\r\n        event.preventDefault();\r\n        const{email,password} = this.state;\r\n        console.log(email + \":\" + password );\r\n\r\n        axios.get(`${PATHBASE}${PATH_USER_LOGIN}?${loginEmail}${email}&${loginPassword}${password}`)\r\n             .then(successLogin => this.setState({successLogin: successLogin.data}))\r\n             .catch(errorLogin => this.setState({errorLogin}));\r\n\r\n        //redirect to main dashboard\r\n      /*   if(successLogin){\r\n            this.props.history.push(\"/main/dashboard\");\r\n        } */\r\n    }\r\n\r\n    signUpUserIfnotINDB(response){\r\n              //get email,name and googleId from response and\r\n              const{enabled,usercreator} = this.state;\r\n      \r\n              const headers = { 'content-type': 'application/json'};\r\n      \r\n              let googleEmail = response.profileObj.email;\r\n              let googleIdasPasswrd = response.profileObj.googleId;\r\n              let googleName = response.profileObj.name;\r\n      \r\n             if(response){\r\n              //then create user\r\n              axios({\r\n                method: 'post',\r\n                url: `${PATHBASE}${PATH_ADDUSER}`,\r\n                data: {\r\n                    address: '',\r\n                    city: '',\r\n                    email: googleEmail,\r\n                    employeeid: '',\r\n                    employeelevel: '' ,\r\n                    enabled: enabled,\r\n                    password: googleIdasPasswrd,\r\n                    phonenumber: '',\r\n                    bankaccountnumber:'',\r\n                    birthdate: '',\r\n                    gender:'',\r\n                    hiredate: '',\r\n                    maritalstatus:'',\r\n                    birthcertid: '',\r\n                    driverslicenseid: '',\r\n                    passportid: '',\r\n                    ssnitid: '',\r\n                    votersid:'',\r\n                    name: googleName,\r\n                    tier2: '',\r\n                    tinnumber:'',\r\n                    marriagecertid:'',\r\n                    usercreator:usercreator,\r\n                   \r\n                },\r\n                headers: headers\r\n            })\r\n            .then(postRecordSuccess => this._isMounted && this.setState({postRecordSuccess: postRecordSuccess.data}))\r\n            .catch(postRecordError => this._isMounted && this.setState({postRecordError}))\r\n            }\r\n\r\n        //redirect to main dashboard\r\n        this.props.history.push(\"/main/dashboard\")\r\n    }\r\n\r\n    render(){\r\n        const{buttonText,clientId,errorLogin,showAlert,successLogin} = this.state;\r\n        const onGoogleLoginSuccess = (response) => {\r\n            let res = response.profileObj;\r\n            \r\n            this.signUpUserIfnotINDB(response);\r\n        }\r\n\r\n        const onGoogleLoginFailure = (response) => {\r\n            let res = response.profileObj;\r\n        }\r\n\r\n        return(\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"sidePage\" md={3}></Col>\r\n                    <Col md={1} className=\"formpage\"></Col> \r\n                    <Col md={3} className=\"formpage\">\r\n                        {successLogin?  \r\n                        /* redirect to main dashboard */\r\n                        this.props.history.push(\"/main/dashboard\")\r\n                        :\r\n                        null\r\n                        }\r\n                        <Form className=\"mt-5 pt-2\">\r\n                            <Form.Group controlId=\"email\">\r\n                                <Form.Label className=\"mt-5 pt-5\">Email address</Form.Label>\r\n                                <Form.Control type=\"email\" size=\"lg\" placeholder=\"Enter email\" onChange={(e) => this.setState({email: e.target.value})}/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"password\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" size=\"lg\" placeholder=\"Password\" onChange={(e) => this.setState({password: e.target.value})}/>\r\n                            </Form.Group>\r\n                            <Button variant=\"secondary\"  type=\"submit\" size=\"lg\" block className=\"mb-4\" onClick={this.handleLoginSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                            <GoogleLogin clientId={clientId} buttonText={buttonText}\r\n                                         onSuccess={onGoogleLoginSuccess}\r\n                                         onFailure={onGoogleLoginFailure}/>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={5} className=\"formpage rightSightNav\">\r\n                    {errorLogin?\r\n                            <Alert className=\"mt-5\" show={showAlert} variant=\"danger\" onClose={(event) => this.setState({showAlert:false})} dismissible>\r\n                            <Alert.Heading>Incorrect Email or Password</Alert.Heading>\r\n                             </Alert> \r\n                            : null\r\n                            }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js",["146","147","148"],"import { Container,Button,Alert,Modal,Form,Col,Spinner} from \"react-bootstrap\"\r\nimport React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATHGETALLUSERS,PARAM_PAGE,PATH_DELETEUSER\r\n ,PARAM_DELETE,PATH_SENDLOGINDETAILS_GMAIL,PATH_PATCH_EDITUSER} from '../API_URLS'\r\nimport {Table,InputGroup,FormControl} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash, faToggleOn, faMailBulk, faSearch, faToggleOff } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {fetchUsersAll} from '../API_URLS/apiCalls'\r\n\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase()) || \r\n    user.email.toLowerCase().includes(searchUser.toLowerCase()) ||\r\n    user.employeeid.toLowerCase().includes(searchUser.toLowerCase())\r\n    ;\r\n\r\nclass ViewUsers extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            //retrieve users attributes\r\n            result:null,\r\n            error:null,\r\n\r\n            //searching for user in searchbar\r\n            searchUser:'',\r\n\r\n            //delete user attributes\r\n            resultDel:null,\r\n            errorDel:null,\r\n\r\n            //send login details attributes\r\n            loginDetailSent:null,\r\n            loginDetailsError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n\r\n            //checkbox attribute\r\n            userstoDisable:[],\r\n\r\n            //update user atttributes\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n\r\n            //toggling to disable or enable user state\r\n            isEnabled: true,\r\n            userEnableorDisableValue:'',\r\n        }\r\n\r\n        //this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSelected = this.onSelected.bind(this);\r\n        this.SendLoginDetails = this.SendLoginDetails.bind(this);\r\n        this.onEditUser = this.onEditUser.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n        this.onDisableUser = this.onDisableUser.bind(this);\r\n    }\r\n    \r\n    fetchAllUsers(page = 0){\r\n       /*  axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .then(error => this.setState({error})); */\r\n\r\n             //code refactoring performed here\r\n             fetchUsersAll(page)\r\n             .then(result => this.setState({result: result.data}))\r\n             .then(error => this.setState({error}));\r\n   }\r\n\r\n    onSelected(id){\r\n        const{userstoDisable}=this.state;\r\n        userstoDisable.push(id);\r\n    }\r\n\r\n    onDelete(id){\r\n        const{userstoDisable}=this.state;\r\n       if(userstoDisable[0] === id){\r\n            axios.get(`${PATHBASE}${PATH_DELETEUSER}?${PARAM_DELETE}${id}`)\r\n                 .then(resultDel => this.setState({resultDel: resultDel.data}))\r\n                 .then(errorDel => this.setState({errorDel}))\r\n            userstoDisable.pop();\r\n\r\n        this.fetchAllUsers();\r\n        }else{\r\n            window.alert(\"You need to select immediate checkbox before you can delete\")\r\n        } \r\n    }\r\n\r\n    onDisableUser(id){\r\n        this.setState(prevState => ({\r\n            isEnabled : !prevState.isEnabled,\r\n            userEnableorDisableValue: id,\r\n        }))\r\n    }\r\n\r\n    SendLoginDetails(email,password){\r\n        axios.get(`${PATHBASE}${PATH_SENDLOGINDETAILS_GMAIL}/${email}/${password}`)\r\n             .then(loginDetailSent => this.setState({loginDetailSent: loginDetailSent.data}))\r\n             .then(loginDetailsError => this.setState({loginDetailsError}))\r\n    }       \r\n\r\n    onEditUser(userid,useraddress,usercity,useremail,\r\n        useremployeeid,useremployeelevel,userenabled,userpassword,userphonenumber,\r\n        userbankaccountnumber,userbirthdate,usergender,userhiredate,usermaritalstatus,\r\n        userbirthcertid,userdriverslicenseid,userpassportid,userssnitid,uservotersid,\r\n        username,usertinnumber,usermarriagecertid,userusercreator){\r\n\r\n        this.setState({\r\n            id: userid,\r\n            address: useraddress,\r\n            city: usercity,\r\n            email: useremail,\r\n            employeeid: useremployeeid,\r\n            employeelevel: useremployeelevel ,\r\n            enabled: userenabled,\r\n            password: userpassword,\r\n            phonenumber: userphonenumber,\r\n            bankaccountnumber:userbankaccountnumber,\r\n            birthdate: userbirthdate,\r\n            gender:usergender,\r\n            hiredate: userhiredate,\r\n            maritalstatus:usermaritalstatus,\r\n            birthcertid: userbirthcertid,\r\n            driverslicenseid: userdriverslicenseid,\r\n            passportid: userpassportid,\r\n            ssnitid: userssnitid,\r\n            votersid:uservotersid,\r\n            tinnumber: usertinnumber,\r\n            marriagecertid: usermarriagecertid,\r\n            usercreator: userusercreator,\r\n            name: username,\r\n       })\r\n\r\n       this.setState({\r\n           showModal:true\r\n       })\r\n    }\r\n\r\n    updateUser(){\r\n        const{id, address,city,email,employeeid,employeelevel,enabled,password,phonenumber,bankaccountnumber,birthdate,\r\n            gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n            marriagecertid,usercreator} = this.state;\r\n        \r\n            const headers = { 'content-type': 'application/json'};\r\n            axios({\r\n                method: 'patch',\r\n                url: `${PATHBASE}${PATH_PATCH_EDITUSER}`,\r\n                data: {\r\n                    id:id,\r\n                    address: address,\r\n                    city: city,\r\n                    email: email,\r\n                    employeeid: employeeid,\r\n                    employeelevel: employeelevel ,\r\n                    enabled: enabled,\r\n                    password: password,\r\n                    phonenumber: phonenumber,\r\n                    bankaccountnumber:bankaccountnumber,\r\n                    birthdate: birthdate,\r\n                    gender:gender,\r\n                    hiredate: hiredate,\r\n                    maritalstatus:maritalstatus,\r\n                    birthcertid: birthcertid,\r\n                    driverslicenseid: driverslicenseid,\r\n                    passportid: passportid,\r\n                    ssnitid: ssnitid,\r\n                    votersid:votersid,\r\n                    tinnumber: tinnumber,\r\n                    marriagecertid: marriagecertid,\r\n                    usercreator: usercreator,\r\n                    name: name,\r\n                },\r\n                headers: headers\r\n            })\r\n            .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n            .catch(onUpdateError => this.setState({onUpdateError}));\r\n            \r\n            this.fetchAllUsers();    \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllUsers();  \r\n    }\r\n   \r\n    render(){\r\n        const{result,error,resultDel,errorDel, page = 0,show,\r\n        loginDetailSent,loginDetailsError,showModal, onUpdateSuccess,\r\n        onUpdateError, \r\n\r\n        //enable or disabling user attribute\r\n        userEnableorDisableValue,\r\n        \r\n        //user data attributes\r\n        address,city,email,employeeid,employeelevel,password,phonenumber,bankaccountnumber,birthdate,\r\n        gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n        marriagecertid, searchUser  \r\n        } = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <div className=\"my-3\">\r\n                   <InputGroup size=\"lg\">\r\n                    <InputGroup.Prepend>\r\n                      <InputGroup.Text id=\"inputGroup-sizing-lg\"><FontAwesomeIcon icon={faSearch}/></InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                     <FormControl placeholder=\"Search by users name/email/employeeid\" aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                          onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                     <InputGroup.Append>\r\n                     <Button variant=\"secondary\" onClick={this.onSearchSubmit}>Search</Button> \r\n                     </InputGroup.Append>\r\n                  </InputGroup>\r\n                 </div>\r\n\r\n                {error?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Unsuccessful Fetching User Records</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {errorDel?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Failure Deleting User Record</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {resultDel?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>User Deleted Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailSent?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>LoginCredentials Sent Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailsError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Sending LoginCredentials  UnSuccessfully</Alert.Heading>\r\n                    <p>Email might be wrong: or Server might be down</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {result?\r\n                  <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>EmployeeID</th>\r\n                            <th>EmployeeLevel</th>\r\n                            <th>BankAccountNo</th>\r\n                            <th>HireDate</th>\r\n                            <th>EMAIL</th>\r\n                            <th>NAME</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {result.content.filter(searchForUser(searchUser)).map(user => \r\n                            <tr key={user.id}>\r\n                                <td>{user.employeeid}</td>\r\n                                <td>{user.employeelevel}</td>\r\n                                <td>{user.bankaccountnumber}</td>\r\n                                <td>{user.hiredate}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>\r\n                                    <input type=\"checkbox\" className=\"mx-2\" onChange={() => this.onSelected(user.id)}/>\r\n                                    <Button variant=\"primary mx-1\" onClick={() => this.onDisableUser(user.id)}>\r\n                                        {userEnableorDisableValue == user.id ?\r\n                                            <FontAwesomeIcon icon={faToggleOff}/>\r\n                                            :<FontAwesomeIcon icon={faToggleOn}/>                     \r\n                                        }\r\n                                    </Button>\r\n                                    <Button variant=\"secondary mx-1\" onClick={() => this.onEditUser(user.id,user.address,user.city,user.email,\r\n                                        user.employeeid,user.employeelevel,user.enabled,user.password,user.phonenumber,\r\n                                        user.bankaccountnumber,user.birthdate,user.gender,user.hiredate,user.maritalstatus,\r\n                                        user.birthcertid,user.driverslicenseid,user.passportid,user.ssnitid,user.votersid,\r\n                                        user.name,user.tinnumber,user.marriagecertid,user.usercreator\r\n                                    )}>\r\n                                      <FontAwesomeIcon icon={faEdit}/>\r\n                                    </Button>\r\n                                    <Button variant=\"danger mx-1\" onClick={() => this.onDelete(user.id)}>\r\n                                      <FontAwesomeIcon icon={faTrash}/>\r\n                                    </Button>\r\n                                    <Button variant=\"success\" onClick={() => this.SendLoginDetails(user.email,user.password)}>\r\n                                      <FontAwesomeIcon icon={faMailBulk}/>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                         )\r\n                        }\r\n                    </tbody>\r\n                  </Table>\r\n                 : \r\n                 <Button variant=\"success\" disabled className=\"mr-2\">\r\n                     <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\"/>\r\n                     Loading...\r\n                 </Button>\r\n                }\r\n                <Button variant=\"primary\" onClick={() => this.fetchAllUsers(page - 1)}>\r\n                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                    Prev\r\n                </Button>\r\n                <Button variant=\"primary mx-3\" onClick={() => this.fetchAllUsers(page + 1)}>\r\n                   Next\r\n                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                </Button>\r\n\r\n                {/* launch modal on edit button clicked */}\r\n                <Modal show={showModal} size=\"lg\" onHide={(event) => this.setState({showModal: false})} aria-labelledby=\"contained-modal-title-vcenter\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit User Details</Modal.Title>\r\n                        {onUpdateError?\r\n                        <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>Unsuccessful Updating User Record</Alert.Heading>\r\n                           <p>Server might be down or currently not available</p>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n\r\n                        {onUpdateSuccess?\r\n                        <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>User Record Updated Successfully</Alert.Heading>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Container fluid>\r\n                            <Form>\r\n                              <Form.Row>\r\n                                 <Col>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={name} onChange={(e) => this.setState({name : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control type=\"text\" value={address} onChange={(e) => this.setState({address : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                 <Col>\r\n                                   <Form.Label>Email</Form.Label>\r\n                                   <Form.Control type=\"email\" value={email} onChange={(e) => this.setState({email : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                   <Form.Label>Password</Form.Label>\r\n                                   <Form.Control type=\"password\" value={password} onChange={(e) => this.setState({password : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                               </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                  <Col md={3}>\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control type=\"text\" value={gender} onChange={(e) => this.setState({gender : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>Date of Birth</Form.Label>\r\n                                    <Form.Control type=\"date\" value={birthdate} onChange={(e) => this.setState({birthdate : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>EmployeeLevel</Form.Label>\r\n                                    <Form.Control type=\"text\" value={employeelevel} onChange={(e) => this.setState({employeelevel : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Label>HireDate</Form.Label>\r\n                                    <Form.Control type=\"date\" value={hiredate} onChange={(e) => this.setState({hiredate : e.target.value})}></Form.Control>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"mt-4\">\r\n                              <Col md={3}>\r\n                                 <Form.Label>City</Form.Label>\r\n                                 <Form.Control type=\"text\" value={city} onChange={(e) => this.setState({city : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>PhoneNumber</Form.Label>\r\n                                 <Form.Control type=\"text\" value={phonenumber} onChange={(e) => this.setState({phonenumber : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>MaritalStatus</Form.Label>\r\n                                 <Form.Control type=\"text\" value={maritalstatus} onChange={(e) => this.setState({maritalstatus : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                <Form.Label>EmployeeID</Form.Label>\r\n                                <Form.Control type=\"text\" value={employeeid} onChange={(e) => this.setState({employeeid : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                               <Form.Label>BankAccountNo</Form.Label>\r\n                               <Form.Control type=\"text\" value={bankaccountnumber} placedholder=\"Enter bankaccountno here\" onChange={(e) => this.setState({bankaccountnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>SSNITID</Form.Label>\r\n                               <Form.Control type=\"text\" value={ssnitid} onChange={(e) => this.setState({ssnitid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                              <Form.Label>VotersID</Form.Label>\r\n                              <Form.Control type=\"text\" value={votersid} onChange={(e) => this.setState({votersid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                               <Form.Label>BirthCertificate</Form.Label>\r\n                               <Form.Control type=\"text\" value={birthcertid} onChange={(e) => this.setState({birthcertid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                                <Form.Label>DriversLicense</Form.Label>\r\n                                <Form.Control type=\"text\" value={driverslicenseid} onChange={(e) => this.setState({driverslicenseid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>PassportNo</Form.Label>\r\n                                <Form.Control type=\"text\" value={passportid} onChange={(e) => this.setState({passportid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>Tin Number</Form.Label>\r\n                               <Form.Control type=\"text\" value={tinnumber} onChange={(e) => this.setState({tinnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>Marriage Cert</Form.Label>\r\n                                <Form.Control type=\"text\" value={marriagecertid} onChange={(e) => this.setState({marriagecertid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                          </Form.Row>\r\n                           <Form.Row className=\"mt-4\">\r\n                            <Col md={4}></Col>\r\n                            <Col md={4}>\r\n                               <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateUser}>\r\n                                 UpdateDetails\r\n                               </Button>\r\n                             </Col>\r\n                            <Col md={4}></Col>\r\n                          </Form.Row>\r\n                          </Form>\r\n                        </Container>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ViewUsers","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\usersmainTab.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js",["149","150"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PARAM_PAGE,PATH_DELETE_ROLE,\r\n    PATH_PATCH_EDIT_ROLE,PATH_GET_ROLES,PATH_ADD_ROLE} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {fetchRolesAll} from '../API_URLS/apiCalls'\r\n\r\nclass ViewRoles extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //attributes on roles fetched\r\n            result:null,\r\n            error:null,\r\n\r\n            //attributes on roles deleted\r\n            resultDel: null,\r\n            errorDel: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n\r\n            //values to changestate on edit clicked\r\n            role_id:'',\r\n            role_name:'',\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n            addRoleShowModal:false,\r\n\r\n            //values to changestate on adding a new role\r\n            rolename:'',\r\n\r\n            //attributes on roles updated\r\n            onUpdateSuccess: null,\r\n            onUpdateError:null,\r\n\r\n            //attributes on roles added\r\n            resultRolepost:null,\r\n            errorRolepost:null,\r\n\r\n        }\r\n\r\n        this.fetchAllRoles = this.fetchAllRoles.bind(this);\r\n        this.onEditRole = this.onEditRole.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.updateRole = this.updateRole.bind(this);\r\n        this.addRoletoDB = this.addRoletoDB.bind(this);\r\n    }\r\n\r\n    fetchAllRoles(page = 0){\r\n      /*   axios.get(`${PATHBASE}${PATH_GET_ROLES}?${PARAM_PAGE}${page}`) */\r\n            \r\n             //code refactoring performed here\r\n             fetchRolesAll(page)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}));\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_ROLE}/${id}`)\r\n             .then(resultDel => this.setState({resultDel: resultDel.data}))\r\n             .then(errorDel => this.setState({errorDel}))\r\n    \r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    onEditRole(id,name){\r\n        this.setState({\r\n            role_id: id,\r\n            role_name: name\r\n        })\r\n\r\n        this.setState({\r\n            showModal:true\r\n        })\r\n    }\r\n\r\n    updateRole(){\r\n        const{role_id,role_name} = this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n        axios({\r\n            method: 'patch',\r\n            url: `${PATHBASE}${PATH_PATCH_EDIT_ROLE}`,\r\n            data: {\r\n                roleid: role_id,\r\n                rolename: role_name,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n        .catch(onUpdateError => this.setState({onUpdateError}));\r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    showaddRoleModal(){\r\n        this.setState({\r\n            addRoleShowModal:true,\r\n        })\r\n    }\r\n\r\n    addRoletoDB(){\r\n        const{rolename} = this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: `${PATHBASE}${PATH_ADD_ROLE}`,\r\n            data: {\r\n                rolename: rolename,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(resultRolepost => this.setState({resultRolepost: resultRolepost.data}))\r\n        .catch(errorRolepost => this.setState({errorRolepost}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,page = 0,show,\r\n             resultDel,errorDel,showModal,role_name,\r\n             onUpdateSuccess,onUpdateError,addRoleShowModal,\r\n             resultRolepost,errorRolepost} = this.state;\r\n        return(\r\n           <Container fluid>\r\n               {error?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful Fetching Roles</Alert.Heading>\r\n                  <p>Server might be down or currently not available</p>\r\n               </Alert> \r\n                : null\r\n               }\r\n\r\n              {errorDel?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful Operation Deleting Role</Alert.Heading>\r\n                  <p>Server might be down or currently not available</p>\r\n               </Alert> \r\n                : null\r\n               }\r\n\r\n                {resultDel?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Role Deleted Successfully</Alert.Heading>\r\n               </Alert> \r\n                : null\r\n                }\r\n\r\n                {/* add role button clicked  show modal*/}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showaddRoleModal()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add New Role</span>  \r\n                </Button>\r\n\r\n                {/* modal content to add a new role */}\r\n                <Modal size=\"lg\" show={addRoleShowModal} onHide={() => this.setState({addRoleShowModal: false})} centered>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Add Role</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      {resultRolepost?\r\n                        <Alert show={show} variant=\"success\" onClose={(event) => this.setState({addRoleShowModal:false})} dismissible>\r\n                          <Alert.Heading>Role Added Successfully</Alert.Heading>\r\n                        </Alert> \r\n                        : null\r\n                      }\r\n                      {errorRolepost?\r\n                        <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({addRoleShowModal:false})} dismissible>\r\n                          <Alert.Heading>Unsuccessful operation adding Role</Alert.Heading>\r\n                          <p>Server might be down: or not available currently</p>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Rolename</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter rolename here\" onChange={(e) => this.setState({rolename : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.addRoletoDB}>\r\n                                      AddRole\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n               {result?\r\n                 <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                 <thead>\r\n                     <tr>\r\n                         <th>ROLE NAMES</th>\r\n                         <th>ACTION</th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tbody>\r\n                     {result.content.map(role => \r\n                         <tr key={role.roleid}>\r\n                             <td>{role.rolename}</td>\r\n                             <td>\r\n                                 <Button variant=\"secondary mx-1\" onClick={() => this.onEditRole(\r\n                                    role.roleid,role.rolename\r\n                                 )}>\r\n                                   <FontAwesomeIcon icon={faEdit}/>\r\n                                 </Button>\r\n                                 <Button variant=\"danger mx-1\" onClick={() => this.onDelete(role.roleid)}>\r\n                                   <FontAwesomeIcon icon={faTrash}/>\r\n                                 </Button>\r\n                             </td>\r\n                         </tr>\r\n                      )\r\n                     }\r\n                 </tbody>\r\n               </Table>\r\n              : null\r\n             }\r\n             <Button variant=\"primary\" onClick={() => this.fetchAllRoles(page - 1)}>\r\n                 <FontAwesomeIcon icon={faArrowLeft}/>\r\n                 Prev\r\n             </Button>\r\n             <Button variant=\"primary mx-3\" onClick={() => this.fetchAllRoles(page + 1)}>\r\n                <FontAwesomeIcon icon={faArrowRight}/>\r\n                 Next\r\n             </Button>\r\n\r\n             {/* On edit button clicked show modal */}\r\n             <Modal size=\"lg\" show={showModal} onHide={() => this.setState({showModal: false})} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit Role</Modal.Title>\r\n                </Modal.Header>\r\n                {onUpdateSuccess?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Role Updated Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {onUpdateError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Unsuccessful operation updating Role</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Modal.Body>\r\n                    <Container fluid>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Rolename</Form.Label>\r\n                                    <Form.Control type=\"text\" value={role_name} onChange={(e) => this.setState({role_name : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col className=\"mt-2\">\r\n                                  <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateRole}>\r\n                                    UpdateDetails\r\n                                  </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Container>\r\n                </Modal.Body>\r\n             </Modal>\r\n           </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewRoles","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\rolesmainTab.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js",["151","152","153","154"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GET_ROLES,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSERROLES} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForRole = searchRole => role =>\r\n    role.rolename.toLowerCase().includes(searchRole.toLowerCase());\r\n\r\nclass AssignRoles extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchRole: '',\r\n\r\n             //fetch role objects\r\n             resultRolefetch: null,\r\n             errorRolefetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign role objects\r\n             resultRoleAssign: null,\r\n             errorRoleAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllRoles = this.fetchAllRoles.bind(this);\r\n        this.assignRole = this.assignRole.bind(this);\r\n    }\r\n\r\n    fetchAllRoles(pageRole = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_ROLES}?${PARAM_PAGE}${pageRole}`)\r\n        .then(resultRolefetch => this.setState({resultRolefetch: resultRolefetch.data}))\r\n        .catch(errorRolefetch => this.setState({errorRolefetch}));\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n        .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n        .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignRole(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedRole = document.getElementById('roleid').value;\r\n\r\n        axios.get(`${PATHBASE}${PATH_ASSIGNUSERROLES}/${selectedUser}/${selectedRole}`)\r\n        .then(resultRoleAssign => this.setState({resultRoleAssign: resultRoleAssign.data}))\r\n        .catch(errorRoleAssign=> this.setState({errorRoleAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllRoles();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultRolefetch,errorRolefetch,resultUserfetch,errorUserfetch,resultRoleassignSuccess,resultRoleassignError,\r\n            pageRole = 0, pageUser = 0,searchUser,searchRole,\r\n            resultRoleAssign,errorRoleAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING Roles</span>\r\n\r\n                 {resultRoleAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Role Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorRoleAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchRole: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Role</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllRoles(pageRole - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllRoles(pageRole + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"roleid\">\r\n                             {resultRolefetch ?\r\n                              resultRolefetch.content.filter(searchForRole(searchRole)).map(role => (\r\n                                <option value={role.roleid}>{role.rolename}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.assignRole}>\r\n                                Assign Role\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignRoles","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\designationmainTab.js",["155","156","157","158"],"import React,{Component} from 'react'\r\nimport {Tabs,Tab,Nav,Col,Row,\r\n    TabContainer,TabContent,TabPane } from 'react-bootstrap'\r\nimport ViewDesignations from './viewdesignations'\r\nimport AssignDesignations from './assigndesignations'\r\n\r\nclass DesignationMain extends Component{\r\n    render(){\r\n        return(\r\n            <Tab.Container  defaultActiveKey=\"viewdesignations\">\r\n            <Row>\r\n              <Col sm={2}>\r\n                <Nav variant=\"pills\" className=\"flex-column\">\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"viewdesignations\">View Designations</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"assigndesignations\">Assign Designations</Nav.Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n              </Col>\r\n              <Col sm={10}>\r\n                <Tab.Content>\r\n                  <Tab.Pane eventKey=\"viewdesignations\">\r\n                    <ViewDesignations />\r\n                  </Tab.Pane>\r\n                  <Tab.Pane eventKey=\"assigndesignations\">\r\n                    <AssignDesignations />\r\n                  </Tab.Pane>\r\n                </Tab.Content>\r\n              </Col>\r\n            </Row>\r\n          </Tab.Container> \r\n        );\r\n    }\r\n}\r\n\r\nexport default DesignationMain;","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\departmentmainTab.js",["159","160","161","162"],"import React,{Component} from 'react'\r\nimport {Tabs,Tab,Nav,Col,Row,\r\n    TabContainer,TabContent,TabPane } from 'react-bootstrap'\r\nimport ViewDepartments from './viewdepartments'\r\nimport AssignDepartments from './assigndepartments'\r\n\r\nclass DepartmentMain extends Component{\r\n    render(){\r\n        return(\r\n            <Tab.Container  defaultActiveKey=\"viewdepartment\">\r\n            <Row>\r\n              <Col sm={2}>\r\n                <Nav variant=\"pills\" className=\"flex-column\">\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"viewdepartment\">View Departments</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"assigndepartment\">Assign Department</Nav.Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n              </Col>\r\n              <Col sm={10}>\r\n                <Tab.Content>\r\n                  <Tab.Pane eventKey=\"viewdepartment\">\r\n                    <ViewDepartments />\r\n                  </Tab.Pane>\r\n                  <Tab.Pane eventKey=\"assigndepartment\">\r\n                    <AssignDepartments />\r\n                  </Tab.Pane>\r\n                </Tab.Content>\r\n              </Col>\r\n            </Row>\r\n          </Tab.Container> \r\n        );\r\n    }\r\n}\r\n\r\nexport default DepartmentMain;","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js",["163","164","165","166","167","168","169"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GETALL_DESIGNATION,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSERDESIGNATION} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus, faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForDesignation = searchDesignation => designation =>\r\n    designation.designationname.toLowerCase().includes(searchDesignation.toLowerCase());\r\n\r\nclass AssignDesignations extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchDesignation: '',\r\n\r\n             //fetch designation objects\r\n             resultDesignationfetch: null,\r\n             errorDesignationfetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign designation objects\r\n             resultDesignationAssign: null,\r\n             errorDesignationAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.assignUserDesignation = this.assignUserDesignation.bind(this);\r\n    }\r\n\r\n    fetchAllDesignations(pageDesignation = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${pageDesignation}`)\r\n             .then(resultDesignationfetch => this.setState({resultDesignationfetch: resultDesignationfetch.data}))\r\n             .catch(errorDesignationfetch => this.setState({errorDesignationfetch}))\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n             .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n             .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignUserDesignation(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedDesignation = document.getElementById('designationId').value;\r\n\r\n        axios.post(`${PATHBASE}${PATH_ASSIGNUSERDESIGNATION}/${selectedUser}/${selectedDesignation}`)\r\n             .then(resultDesignationAssign => this.setState({resultDesignationAssign: resultDesignationAssign.data}))\r\n             .catch(errorDesignationAssign=> this.setState({errorDesignationAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDesignations();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultDesignationfetch,errorDesignationfetch,resultUserfetch,errorUserfetch,resultDesignationAssignSuccess,resultDesignationAssignError,\r\n            pageDesignation = 0, pageUser = 0,searchUser,searchDesignation,\r\n            resultDesignationAssign,errorDesignationAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING designations</span>\r\n                 {resultDesignationAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Designation Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorDesignationAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning User to Designation</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchDesignation: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Designation</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"designationId\">\r\n                             {resultDesignationfetch ?\r\n                              resultDesignationfetch.content.filter(searchForDesignation(searchDesignation)).map(designation => (\r\n                                <option value={designation.id}>{designation.designationname}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.assignUserDesignation()}>\r\n                                Assign Designation\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignDesignations","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js",["170","171","172"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PATH_GETALL_DESIGNATION,PATH_ADD_DESIGNATION,PATH_DELETE_DESIGNATION,\r\n    PARAM_PAGE,PATH_GET_DEPARTMENT,PATH_PATCH_DESIGNATION} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {fetchDesignationsAll} from '../API_URLS/apiCalls'\r\n\r\nclass ViewDesignations extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //result from fetching designations\r\n            result: null,\r\n            error: null, \r\n\r\n            //result from fetchingn departments\r\n            deptResult:null,\r\n            deptError:null,\r\n\r\n            //result objects on designation deleted\r\n            deleteDesSuccess:null,\r\n            deleteDesFailure:null,\r\n\r\n            //result object on designation updated\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n\r\n            //result on adding new designation\r\n            addResult:null,\r\n            addError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n            showforUpdateAlert:true,\r\n            showforAddDesignation:true,\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n            showAddModal:false,\r\n            \r\n            //values to edit on editClicked\r\n            id: '',\r\n            designationname:'',\r\n            departmentid: '',\r\n            departmentcode: '',\r\n            departmentname: '',\r\n\r\n            //values to changeState when adding new designation\r\n            designationnamenew:'',\r\n        }\r\n\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onEditDesignation = this.onEditDesignation.bind(this);\r\n        this.updateDesignation = this.updateDesignation.bind(this);\r\n        this.showAddDesignation = this.showAddDesignation.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.addDesignationtoDB = this.addDesignationtoDB.bind(this);\r\n    }\r\n\r\n    fetchAllDesignations(page = 0){\r\n      /*   axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${page}`) */\r\n      //code refactoring performed here\r\n             fetchDesignationsAll(page)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}))\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n        .then(deptResult => this.setState({deptResult: deptResult.data}))\r\n        .catch(deptError => this.setState({deptError}));\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_DESIGNATION}/${id}`)\r\n             .then(deleteDesSuccess => this.setState({deleteDesSuccess : deleteDesSuccess.data}))\r\n             .catch(deleteDesFailure => this.setState({deleteDesFailure}))\r\n    }\r\n\r\n    onEditDesignation(desid,desname ,desdeptid,desdeptcode,desdeptname){\r\n        this.setState({\r\n            id: desid,\r\n            designationname: desname,\r\n            departmentid: desdeptid,\r\n            departmentcode: desdeptcode,\r\n            departmentname: desdeptname,\r\n        })\r\n\r\n        this.setState({\r\n            showModal:true,\r\n        })\r\n    }\r\n\r\n    updateDesignation(){\r\n        const{id,designationname,departmentid,departmentcode,departmentname}=this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n        axios({\r\n            method: 'patch',\r\n            url: `${PATHBASE}${PATH_PATCH_DESIGNATION}`,\r\n            data: {\r\n                id: id,\r\n                designationname: designationname,\r\n                department: {\r\n                    id:departmentid ,\r\n                    departmentid:departmentcode,\r\n                    departmentname: departmentname\r\n                }\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n        .catch(onUpdateError => this.setState({onUpdateError}));\r\n\r\n        this.fetchAllDesignations();\r\n    }\r\n\r\n     addDesignationtoDB(){\r\n          const{designationnamenew} = this.state; \r\n          let selectedDepartment = document.getElementById('deptid').value;\r\n\r\n          axios.get(`${PATHBASE}${PATH_ADD_DESIGNATION}/${designationnamenew}/${selectedDepartment}`)\r\n               .then(addResult => this.setState({addResult: addResult.data}))\r\n               .catch(addError => this.setState({addError})); \r\n    }\r\n\r\n    showAddDesignation(){\r\n        this.setState({\r\n            showAddModal:true,\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDesignations();\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,page = 0,deleteDesFailure,deleteDesSuccess,show,\r\n            showModal,showAddModal, designationname, onUpdateSuccess,onUpdateError,\r\n            showforUpdateAlert,designationnamenew,pageDept = 0,deptResult,\r\n            deptError,addResult,addError,showforAddDesignation} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {deleteDesFailure?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Unsuccessful Deleting designation</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {deleteDesSuccess?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Designation deleted successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {/* Button to show add new designation================================================ */}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showAddDesignation()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add Designation</span>  \r\n                </Button>\r\n                {/* Button to show add new designation================================================ */}\r\n\r\n                {/* add new designation=============================================================== */}\r\n                <Modal show={showAddModal} size=\"lg\" onHide={() => this.setState({showAddModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New  Designation</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {addError?\r\n                            <Alert show={showforAddDesignation} variant=\"danger\" onClose={(event) => this.setState({showforAddDesignation:false})} dismissible>\r\n                              <Alert.Heading>Unsuccessful creating new designation</Alert.Heading>\r\n                              <p>Server might be down or currently not available</p>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n\r\n                          {addResult?\r\n                            <Alert show={showforAddDesignation} variant=\"success\" onClose={(event) => this.setState({showforAddDesignation:false})} dismissible>\r\n                              <Alert.Heading>Designation created successfully</Alert.Heading>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Designation Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={designationnamenew} onChange={(e) => this.setState({designationnamenew : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"mt-4 mb-2\">\r\n                                <Col>\r\n                                    <Form.Label>Select Department</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                               <Col className=\"mt-2 mb-2\">\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                 <Form.Control as=\"select\" id=\"deptid\">\r\n                                {deptResult ?\r\n                                 deptResult.content.map(department => (\r\n                                    <option value={department.id}>{department.departmentname}</option>\r\n                                  ))\r\n                                 : null\r\n                                 }   \r\n                            </Form.Control>\r\n                            </Form.Row>\r\n                             <Form.Row className=\"mt-4\">\r\n                                    <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.addDesignationtoDB()}>\r\n                                        Add Designation  \r\n                                    </Button>\r\n                             </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* add new designation=============================================================== */}\r\n\r\n                {/* on edit clicked show modal populated with table values */}\r\n                <Modal show={showModal} size=\"lg\" onHide={() => this.setState({showModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit Designation </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {onUpdateError?\r\n                            <Alert show={showforUpdateAlert} variant=\"danger\" onClose={(event) => this.setState({showforUpdateAlert:false})} dismissible>\r\n                              <Alert.Heading>Unsuccessful Updating designation</Alert.Heading>\r\n                              <p>Server might be down or currently not available</p>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n\r\n                          {onUpdateSuccess?\r\n                            <Alert show={showforUpdateAlert} variant=\"success\" onClose={(event) => this.setState({showforUpdateAlert:false})} dismissible>\r\n                              <Alert.Heading>Designation updated successfully</Alert.Heading>\r\n                            </Alert> \r\n                            : null\r\n                          }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Change Designation Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={designationname} onChange={(e) => this.setState({designationname : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateDesignation}>\r\n                                        Update Designation  \r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* end line of on edit clicked button =====================*/}\r\n\r\n                {result?\r\n                    <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                 <thead>\r\n                     <tr>\r\n                         <th>DESIGNATION NAME</th>\r\n                         <th>DEPARTMENT</th>\r\n                         <th>ACTION</th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tbody>\r\n                     {result.content.map(designation => \r\n                         <tr key={designation.id}>\r\n                             <td>{designation.designationname}</td>\r\n                             <td>{designation.department.departmentname}</td>\r\n                             <td>\r\n                                 <Button variant=\"secondary mx-1\" onClick={() => this.onEditDesignation(\r\n                                    designation.id,designation.designationname ,\r\n                                    designation.department.id,designation.department.departmentid,\r\n                                    designation.department.departmentname\r\n                                 )}>\r\n                                   <FontAwesomeIcon icon={faEdit}/>\r\n                                 </Button>\r\n                                 <Button variant=\"danger mx-1\" onClick={() => this.onDelete(designation.id)}>\r\n                                   <FontAwesomeIcon icon={faTrash}/>\r\n                                 </Button>\r\n                             </td>\r\n                         </tr>\r\n                      )\r\n                     }\r\n                 </tbody>\r\n               </Table>\r\n              : null\r\n                }\r\n              <Button variant=\"primary\" onClick={() => this.fetchAllDesignations(page - 1)}>\r\n                  <FontAwesomeIcon icon={faArrowLeft}/>\r\n                   Prev\r\n              </Button>\r\n              <Button variant=\"primary mx-3\" onClick={() => this.fetchAllDesignations(page + 1)}>\r\n                <FontAwesomeIcon icon={faArrowRight}/>\r\n                 Next\r\n             </Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewDesignations","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js",["173","174","175","176","177","178","179"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GET_DEPARTMENT,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ASSIGNUSER_DEPARTMENT} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus,faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForDepartment = searchDepartment => department =>\r\n    department.departmentname.toLowerCase().includes(searchDepartment.toLowerCase());\r\n\r\nclass AssignDepartments extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchDepartment: '',\r\n\r\n             //fetch department objects\r\n             resultDeptfetch: null,\r\n             errorDeptfetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign role objects\r\n             resultDeptAssign: null,\r\n             errorDeptAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.assignDepartment = this.assignDepartment.bind(this);\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n            .then(resultDeptfetch => this.setState({resultDeptfetch: resultDeptfetch.data}))\r\n            .catch(errorDeptfetch => this.setState({errorDeptfetch}));\r\n    }\r\n\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n        .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n        .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    assignDepartment(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedDepartment = document.getElementById('deptid').value;\r\n\r\n        axios.get(`${PATHBASE}${PATH_ASSIGNUSER_DEPARTMENT}/${selectedUser}/${selectedDepartment}`)\r\n        .then(resultDeptAssign => this.setState({resultDeptAssign: resultDeptAssign.data}))\r\n        .catch(errorDeptAssign=> this.setState({errorDeptAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDepartments();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultDeptfetch,errorDeptfetch,resultUserfetch,errorUserfetch,resultDeptAssignSuccess,resultDeptAssignError,\r\n            pageDept = 0, pageUser = 0,searchUser,searchDepartment,\r\n            resultDeptAssign,errorDeptAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING Departments</span>\r\n\r\n                 {resultDeptAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Department Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorDeptAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning Department</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type role name here\" onChange={(e) => this.setState({searchDepartment: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Department</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"deptid\">\r\n                             {resultDeptfetch ?\r\n                              resultDeptfetch.content.filter(searchForDepartment(searchDepartment)).map(department => (\r\n                                <option value={department.id}>{department.departmentid} - {department.departmentname}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.assignDepartment()}>\r\n                                Assign Department\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignDepartments","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js",["180","181"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATH_GET_DEPARTMENT,PARAM_PAGE,PATH_DELETE_DEPARTMENT,\r\n    PATH_PATCH_EDITDEPARTMENT,PATHBASE,PATH_ADD_DEPARTMENT} from '../API_URLS'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {fetchDepartmentsAll} from '../API_URLS/apiCalls'\r\n\r\nclass ViewDepartments extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //fetchdepartments object attributes\r\n            deptfetchSuccess:null,\r\n            deptfetchError:null,\r\n\r\n            //delete department object attributes\r\n            deptDeleteSuccess:null,\r\n            deptDeleteError:null,\r\n\r\n            //add department object attributes\r\n            resultpost:null,\r\n            errorpost:null,\r\n\r\n            //update department object attributes\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n            deletdeptShow:true,\r\n            updatedeptShow:true,\r\n            addDeptalertShow:true,\r\n\r\n            //modal attributes\r\n            showModalonEdit: false,\r\n            addDeptModal:false,\r\n\r\n            //attributes to change state when adding new department\r\n            departmentid:'',\r\n            departmentname:'',\r\n        }\r\n\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.updateDepartment = this.updateDepartment.bind(this);\r\n        this.showAddDepartment = this.showAddDepartment.bind(this);\r\n        this.addDepartmenttoDB = this.addDepartmenttoDB.bind(this);\r\n    }\r\n\r\n    fetchAllDepartments(page = 0){\r\n      /*   axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${page}`) */\r\n      //code refactoring performed here\r\n             fetchDepartmentsAll(page)\r\n             .then(deptfetchSuccess => this.setState({deptfetchSuccess: deptfetchSuccess.data}))\r\n             .catch(deptfetchError => this.setState({deptfetchError}));\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_DEPARTMENT}/${id}`)\r\n             .then(deptDeleteSuccess => this.setState({deptDeleteSuccess: deptDeleteSuccess.data}))\r\n             .catch(deptDeleteError => this.setState({deptDeleteError}))\r\n             this.fetchAllDepartments();\r\n    }\r\n\r\n    onEditDepartment(id,deptid,name){\r\n        this.setState({\r\n            id: id,\r\n            departmentid:deptid,\r\n            departmentname: name,\r\n        })\r\n        \r\n        this.setState({\r\n            showModalonEdit:true,\r\n        })\r\n    }\r\n\r\n    updateDepartment(){\r\n        const{id,departmentid,departmentname} = this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n        axios({\r\n            method: 'patch',\r\n            url: `${PATHBASE}${PATH_PATCH_EDITDEPARTMENT}`,\r\n            data: {\r\n                id: id,\r\n                departmentid:departmentid,\r\n                departmentname: departmentname,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n        .catch(onUpdateError => this.setState({onUpdateError}));\r\n        \r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    showAddDepartment(){\r\n        this.setState({\r\n            addDeptModal:true,\r\n        })\r\n    }\r\n\r\n    addDepartmenttoDB(){\r\n        const{departmentid,departmentname}=this.state;\r\n        const headers = { 'content-type': 'application/json'};\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: `${PATHBASE}${PATH_ADD_DEPARTMENT}`,\r\n            data: {\r\n                departmentid: departmentid,\r\n                departmentname: departmentname,\r\n            },\r\n            headers: headers\r\n        })\r\n        .then(resultpost => this.setState({resultpost: resultpost.data}))\r\n        .catch(errorpost => this.setState({errorpost}));\r\n\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    render(){\r\n        const{page = 0,deptfetchSuccess,deptfetchError,show,\r\n              deptDeleteSuccess,deptDeleteError,deletdeptShow,\r\n              showModalonEdit,departmentid,departmentname,\r\n              onUpdateError,onUpdateSuccess,updatedeptShow,\r\n              addDeptModal,resultpost,errorpost,addDeptalertShow} = this.state;\r\n        return(\r\n            <Container fluid>   \r\n                {deptDeleteSuccess?\r\n                <Alert show={deletdeptShow} variant=\"success\" onClose={(event) => this.setState({deletdeptShow:false})} dismissible>\r\n                    <Alert.Heading>Department deleted Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {deptDeleteError?\r\n                <Alert show={deletdeptShow} variant=\"danger\" onClose={(event) => this.setState({deletdeptShow:false})} dismissible>\r\n                    <Alert.Heading>Deleting department unsuccessful</Alert.Heading>\r\n                      <p>Server might be down: or currently unavailable</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {deptfetchError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Error Fetching Departments</Alert.Heading>\r\n                      <p>Server might be down</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {/* Button to show add new designation================================================ */}\r\n                <Button variant=\"success my-3 py-1\" size=\"lg\" onClick={() => this.showAddDepartment()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add Department</span>  \r\n                </Button>\r\n                {/* Button to show add new designation================================================ */}\r\n\r\n                {/* add new department modal ==========================================================*/}\r\n                 <Modal show={addDeptModal} size=\"lg\" onHide={() => this.setState({addDeptModal: false})} centered>\r\n                     <Modal.Header closeButton>\r\n                         <Modal.Title>Add New Department</Modal.Title>\r\n                     </Modal.Header>\r\n                     <Modal.Body>\r\n                         {resultpost?\r\n                           <Alert show={addDeptalertShow} variant=\"success\" onClose={(event) => this.setState({addDeptalertShow:false})} dismissible>\r\n                              <Alert.Heading>Department added Successfully</Alert.Heading>\r\n                           </Alert> \r\n                            : null\r\n                          }\r\n                          {errorpost?\r\n                           <Alert show={addDeptalertShow} variant=\"danger\" onClose={(event) => this.setState({addDeptalertShow:false})} dismissible>\r\n                              <Alert.Heading>Failure adding new Department</Alert.Heading>\r\n                              <p>Server might be down: or currently unavailable</p>\r\n                           </Alert> \r\n                            : null\r\n                          }\r\n                          <Form>\r\n                              <Form.Row className=\"mt-2\">\r\n                                  <Col>\r\n                                     <Form.Label>Department Code</Form.Label>\r\n                                     <Form.Control type=\"text\" placeholder=\"Departmentcode  here....\" onChange={(e) => this.setState({departmentid : e.target.value})}/>\r\n                                  </Col>\r\n                              </Form.Row>\r\n                              <Form.Row className=\"mt-2\">\r\n                                  <Col>\r\n                                     <Form.Label>Department Name</Form.Label>\r\n                                     <Form.Control type=\"text\" placeholder=\"Departmentname  here....\" onChange={(e) => this.setState({departmentname : e.target.value})}/>\r\n                                  </Col>\r\n                              </Form.Row>\r\n                              <Form.Row className=\"mt-2\">\r\n                                   <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.addDepartmenttoDB()}>\r\n                                        Add Department  \r\n                                    </Button>\r\n                              </Form.Row>\r\n                          </Form>\r\n                     </Modal.Body>\r\n                 </Modal>\r\n                {/* end add new department modal ======================================================*/}\r\n\r\n                {deptfetchSuccess?\r\n                    <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>DEPARTMENT CODE</th>\r\n                            <th>DEPARTMENT NAME</th>\r\n                            <th>ACTION</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {deptfetchSuccess.content.map(department => \r\n                                <tr key={department.id}>\r\n                                <td>{department.departmentid}</td>\r\n                                <td>{department.departmentname}</td>\r\n                                <td>\r\n                                    <Button variant=\"secondary mx-1\" onClick={() => this.onEditDepartment(\r\n                                        department.id,department.departmentid,department.departmentname\r\n                                    )}>\r\n                                        <FontAwesomeIcon icon={faEdit}/>\r\n                                    </Button>\r\n                                    <Button variant=\"danger mx-1\" onClick={() => this.onDelete(department.id)}>\r\n                                        <FontAwesomeIcon icon={faTrash}/>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                    </Table>\r\n                    : null\r\n                    }\r\n                    <Button variant=\"primary\" onClick={() => this.fetchAllDepartments(page - 1)}>\r\n                        <FontAwesomeIcon icon={faArrowLeft}/>\r\n                        Prev\r\n                    </Button>\r\n                    <Button variant=\"primary mx-3\" onClick={() => this.fetchAllDepartments(page + 1)}>\r\n                    <FontAwesomeIcon icon={faArrowRight}/>\r\n                    Next\r\n                </Button>\r\n\r\n               {/* on edit button clicked===================================================*/}\r\n                  <Modal show={showModalonEdit} size=\"lg\" onHide={() => this.setState({showModalonEdit: false})} centered>\r\n                      <Modal.Header closeButton>\r\n                          <Modal.Title>Edit Department</Modal.Title>\r\n                      </Modal.Header>\r\n                      <Modal.Body>\r\n                        {onUpdateError?\r\n                             <Alert show={updatedeptShow} variant=\"danger\" onClose={(event) => this.setState({updatedeptShow:false})} dismissible>\r\n                             <Alert.Heading>Updating department unsuccessful</Alert.Heading>\r\n                             <p>Server might be down: or currently unavailable</p>\r\n                             </Alert> \r\n                             : null\r\n                         }\r\n                         {onUpdateSuccess?\r\n                             <Alert show={updatedeptShow} variant=\"success\" onClose={(event) => this.setState({updatedeptShow:false})} dismissible>\r\n                               <Alert.Heading>Department updated Successfully</Alert.Heading>\r\n                             </Alert> \r\n                             : null\r\n                         }\r\n                          <Form>\r\n                              <Form.Row>\r\n                                  <Col>\r\n                                     <Form.Label>Department Code</Form.Label>\r\n                                     <Form.Control type=\"text\" value={departmentid} onChange={(e) => this.setState({departmentid : e.target.value})}/>\r\n                                  </Col>\r\n                              </Form.Row>\r\n                              <Form.Row>\r\n                                   <Col>\r\n                                      <Form.Label>Department Name</Form.Label>\r\n                                      <Form.Control type=\"text\" value={departmentname} onChange={(e) => this.setState({departmentname : e.target.value})}/>\r\n                                   </Col>\r\n                              </Form.Row>\r\n                              <Form.Row>\r\n                                <Col>\r\n                                    <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateDepartment}>\r\n                                        Update Department  \r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                          </Form>\r\n                      </Modal.Body>\r\n                  </Modal>\r\n               {/* end edit button clicked===================================================*/}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewDepartments","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\users\\userdetails.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js",["182","183","184","185"],"import React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATH_GETALL_BENEFITS,PATHGETALLUSERS,\r\n        PARAM_PAGE,PATH_ADD_USERBENEFIT} from '../API_URLS';\r\nimport {Form,Col,Container,Button,Alert} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faCoffee} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst searchForUser = searchUser => user =>\r\n    user.name.toLowerCase().includes(searchUser.toLowerCase());\r\n\r\nconst searchForBenefit = searchBenefit => benefit =>\r\n    benefit.benefitname.toLowerCase().includes(searchBenefit.toLowerCase());\r\n\r\nclass AssignBenefits extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            //search user and role attributes\r\n            searchUser: '',\r\n            searchBenefit: '',\r\n\r\n             //fetch benefit objects\r\n             resultBenefitfetch: null,\r\n             errorBenefitfetch: null,\r\n \r\n             //fetch user objects\r\n             resultUserfetch: null,\r\n             errorUserfetch:null,\r\n \r\n             //assign role objects\r\n             resultBenefitAssign: null,\r\n             errorBenefitAssign: null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.fetchAllBenefits = this.fetchAllBenefits.bind(this);\r\n        this.assignBenefit = this.assignBenefit.bind(this);\r\n    }\r\n\r\n    fetchAllBenefits(pageBenefit = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_BENEFITS}?${PARAM_PAGE}${pageBenefit}`)\r\n             .then(resultBenefitfetch => this.setState({resultBenefitfetch: resultBenefitfetch.data}))\r\n             .catch(errorBenefitfetch => this.setState({errorBenefitfetch}));\r\n    }\r\n    fetchAllUsers(pageUser = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${pageUser}`)\r\n             .then(resultUserfetch => this.setState({resultUserfetch: resultUserfetch.data}))\r\n             .catch(errorUserfetch => this.setState({errorUserfetch}));\r\n    }\r\n\r\n    ///test/userbenefit/{benefitid}/{userid}\r\n    assignBenefit(){\r\n        let selectedUser = document.getElementById('userid').value;\r\n        let selectedBenefit = document.getElementById('benefitId').value;\r\n\r\n        axios.post(`${PATHBASE}${PATH_ADD_USERBENEFIT}/${selectedBenefit}/${selectedUser}`)\r\n             .then(resultBenefitAssign => this.setState({resultBenefitAssign: resultBenefitAssign.data}))\r\n             .catch(errorBenefitAssign => this.setState({errorBenefitAssign}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllBenefits();\r\n        this.fetchAllUsers();\r\n    }\r\n\r\n    render(){\r\n        const{resultDeptfetch,errorBenefitfetch,resultUserfetch,resultBenefitfetch,resultDeptAssignSuccess,resultDeptAssignError,\r\n            pageBenefit = 0, pageUser = 0,searchUser,searchBenefit,\r\n            resultBenefitAssign,errorBenefitAssign,show} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                <span> <FontAwesomeIcon icon={faCoffee}/>ASSIGNING Benefits</span>\r\n\r\n                 {resultBenefitAssign?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>User Assigned Benefit Successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n                 {errorBenefitAssign?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                  <Alert.Heading>Error Assigning Benefit</Alert.Heading>\r\n                  <p>Server might be down: or not available currently</p>\r\n                </Alert> \r\n                : null\r\n                } \r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col className=\"mt-3 py-2\">\r\n                            <Form.Row>\r\n                                <Col className=\"mb-2\">\r\n                                    <Form.Control type=\"text\"  placeholder=\"Type username here\" onChange={(e) => this.setState({searchUser: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select User</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllUsers(pageUser - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllUsers(pageUser + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"userid\">\r\n                             {resultUserfetch ?\r\n                              resultUserfetch.content.filter(searchForUser(searchUser)).map(user => (\r\n                                <option value={user.id}>{user.name}</option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-5 py-2\">\r\n                        <Col>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                   <Form.Control type=\"text\"  placeholder=\"Type benefit name here\" onChange={(e) => this.setState({searchBenefit: e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Label>Select Benefit</Form.Label>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllBenefits(pageBenefit - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllBenefits(pageBenefit + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Control as=\"select\" id=\"benefitId\">\r\n                             {resultBenefitfetch ?\r\n                              resultBenefitfetch.content.filter(searchForBenefit(searchBenefit)).map(benefit => (\r\n                                    <option value={benefit.id}>\r\n                                        {benefit.designation?\r\n                                           benefit.benefitname\r\n                                         : null\r\n                                        }\r\n                                        -------- \r\n                                        {benefit.designation?\r\n                                           benefit.designation.designationname\r\n                                         : null\r\n                                        }\r\n                                        -------- \r\n                                         {benefit.designation?\r\n                                           benefit.designation.department.departmentname\r\n                                         : null\r\n                                        }\r\n                                    </option>\r\n                             ))\r\n                              : null\r\n                            }   \r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"mt-3 py-2\">\r\n                        <Col>\r\n                           <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={() => this.assignBenefit()}>\r\n                                Assign Benefit\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AssignBenefits","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js",["186","187","188"],"import React,{Component} from  'react'\r\nimport {PATHBASE,PARAM_PAGE,PATH_GETALL_BENEFITS,PATH_GETALL_DESIGNATION,PATH_POST_BENEFIT\r\n    ,PATH_DELETE_BENEFIT,NO_OF_DESIGNATIONS,PATH_GET_DEPARTMENT} from '../API_URLS'\r\nimport axios from 'axios'\r\nimport {Container,Button,Table,Alert, Form,Col,Modal} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash,faPlus} from '@fortawesome/free-solid-svg-icons'\r\n    \r\nimport {fetchBenefitAll} from '../API_URLS/apiCalls'\r\n\r\nclass ViewBenefits extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n           //attributes on benefits fetch \r\n           result: null,\r\n           error: null,  \r\n\r\n           //attributes to change state adding new benefit\r\n           benefitname: '',\r\n           calculatedamount:'',\r\n           percentageonCalcamount: '',\r\n           flatamount:'',\r\n           designation:'',\r\n\r\n           //checkbox state to activate  flatamount\r\n            flatamountradiobtn:false,\r\n            calculatedamoutradiobtn:false,\r\n\r\n           //attributes on benefit deleted\r\n           resultOndelete:null,\r\n           errorOndelete:null,\r\n\r\n           //attributes on department  fetched\r\n           resultDept:null,\r\n           errorDept:null,\r\n\r\n           //attributes on designation fetched\r\n           resultDesignation:null,\r\n           errorDesignation:null,\r\n\r\n           //alert attributes\r\n           fetchbenefitsShow:true,\r\n           deletebenefitShow:true,\r\n           postbenefitShow:true,\r\n\r\n           //modal attributes to add benefit\r\n           showModal:false,\r\n\r\n           //multiple select attribute\r\n           selectedDesignations:'',\r\n           selectedDepartments: '',\r\n\r\n           //posting benefits to db result objects\r\n           onPostSuccess:null,\r\n           onPostFailure:null,\r\n        }\r\n\r\n        this.fetchAllBenefits = this.fetchAllBenefits.bind(this);\r\n        this.fetchAllDepartments = this.fetchAllDepartments.bind(this);\r\n        this.fetchAllDesignations = this.fetchAllDesignations.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.showaddBenefitModal = this.showaddBenefitModal.bind(this);\r\n        this.addBenefittoDB = this.addBenefittoDB.bind(this);\r\n        this.multipleselectHandler =this.multipleselectHandler.bind(this);\r\n        /* this.multipleselectHandlerDept = this.multipleselectHandlerDept.bind(this); */\r\n        this.clearModalFields = this.clearModalFields.bind(this);\r\n    }\r\n\r\n    fetchAllBenefits(page = 0){\r\n       /*  axios.get(`${PATHBASE}${PATH_GETALL_BENEFITS}?${PARAM_PAGE}${page}`) */\r\n            //code refactoring performed here\r\n             fetchBenefitAll(page)\r\n             .then(result => this.setState({result: result.data}))\r\n             .catch(error => this.setState({error}));\r\n    }\r\n\r\n    fetchAllDepartments(pageDept = 0){\r\n        axios.get(`${PATHBASE}${PATH_GET_DEPARTMENT}?${PARAM_PAGE}${pageDept}`)\r\n             .then(resultDept => this.setState({resultDept: resultDept.data}))\r\n             .catch(errorDept => this.setState({errorDept}));\r\n    }\r\n\r\n    fetchAllDesignations(pageDesignation = 0){\r\n        axios.get(`${PATHBASE}${PATH_GETALL_DESIGNATION}?${PARAM_PAGE}${pageDesignation}`)\r\n             .then(resultDesignation => this.setState({resultDesignation: resultDesignation.data}))\r\n             .catch(errorDesignation => this.setState({errorDesignation}))\r\n    }\r\n\r\n    onDelete(id){\r\n        axios.get(`${PATHBASE}${PATH_DELETE_BENEFIT}/${id}`)\r\n             .then(resultOndelete => this.setState({resultOndelete: resultOndelete.data}))\r\n             .catch(errorOndelete => this.setState({errorOndelete}))\r\n        this.fetchAllBenefits();\r\n    }\r\n\r\n    showaddBenefitModal(){\r\n        this.setState({\r\n            showModal:true,\r\n        })\r\n    }\r\n\r\n    multipleselectHandler(event){\r\n        const selected=[];\r\n        let selectedOption = (event.target.selectedOptions);\r\n\r\n        for(let i=0; i < selectedOption.length; i++){\r\n            selected.push(selectedOption.item(i).value)\r\n        }\r\n        this.setState({\r\n            selectedDesignations:selected\r\n        })\r\n    }\r\n\r\n  /*   multipleselectHandlerDept(event){\r\n        const selectedDept=[];\r\n        let selectedOption = (event.target.selectedOptions);\r\n\r\n        for(let i=0; i < selectedOption.length; i++){\r\n            selectedDept.push(selectedOption.item(i).value)\r\n        }\r\n        this.setState({\r\n            selectedDepartments:selectedDept\r\n        })\r\n    } */\r\n\r\n    addBenefittoDB(){\r\n        const{benefitname,calculatedamount,flatamount,\r\n        percentageonCalcamount,selectedDesignations} = this.state;\r\n        \r\n        let selectedFrequency = document.getElementById('frequencyId').value;\r\n        let computationsonCalculatedAmount = ((+percentageonCalcamount/100) * +calculatedamount)\r\n\r\n       // \"/test/benefit/{benefitname}/{calculatedamount}/{flatamount}/{frequency}/{percentagevalue}/{designations}\"\r\n        axios.post(`${PATHBASE}${PATH_POST_BENEFIT}/${benefitname}/${computationsonCalculatedAmount}/${flatamount}/\r\n              ${selectedFrequency}/${percentageonCalcamount}?${NO_OF_DESIGNATIONS}${selectedDesignations}`) \r\n             .then(onPostSuccess => this.setState({onPostSuccess: onPostSuccess.data}))\r\n             .catch(onPostFailure => this.setState({onPostFailure}));    \r\n    }\r\n\r\n    clearModalFields(){\r\n        this.setState({\r\n            benefitname: '',\r\n            calculatedamount:'',\r\n            percentageonCalcamount: '',\r\n            flatamount:'',\r\n            designation:'',\r\n            flatamountradiobtn:false,\r\n            calculatedamoutradiobtn:false,\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.fetchAllBenefits();\r\n        this.fetchAllDesignations();\r\n        this.fetchAllDepartments();\r\n    }\r\n\r\n    render(){\r\n        const{result,error,fetchbenefitsShow,page = 0,resultOndelete,\r\n              errorOndelete,deletebenefitShow,showModal,pageDept = 0,\r\n              pageDesignation = 0,benefitname,calculatedamount,flatamount,\r\n              flatamountradiobtn,calculatedamoutradiobtn,percentageonCalcamount,\r\n              resultDesignation,resultDept,onPostSuccess,onPostFailure,\r\n              postbenefitShow} = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {error?\r\n                <Alert show={fetchbenefitsShow} variant=\"danger\" onClose={(event) => this.setState({fetchbenefitsShow:false})} dismissible>\r\n                  <Alert.Heading>Error fetching Benefits</Alert.Heading>\r\n                  <p>Server might be down: or Currently unavailable</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {errorOndelete?\r\n                <Alert show={deletebenefitShow} variant=\"danger\" onClose={(event) => this.setState({deletebenefitShow:false})} dismissible>\r\n                  <Alert.Heading>Error deleting Benefit</Alert.Heading>\r\n                  <p>Server might be down: or Currently unavailable</p>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {resultOndelete?\r\n                <Alert show={deletebenefitShow} variant=\"success\" onClose={(event) => this.setState({deletebenefitShow:false})} dismissible>\r\n                  <Alert.Heading>Benefit deleted successfully</Alert.Heading>\r\n                </Alert> \r\n                : null\r\n                }\r\n\r\n                {/* add benefit button clicked  show modal=============================================*/}\r\n                <Button variant=\"success my-2 py-1\" size=\"lg\" onClick={() => this.showaddBenefitModal()}>\r\n                      <span><FontAwesomeIcon icon={faPlus} spin/>Add New Benefit</span>  \r\n                </Button>\r\n                {/* add benefit button clicked  show modal=============================================*/}\r\n\r\n                {/* modal to add new benefit========================================================== */}\r\n                <Modal size=\"lg\" show={showModal} onHide={() => this.setState({showModal: false})} centered>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Benefit</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                         {onPostFailure?\r\n                             <Alert show={postbenefitShow} variant=\"danger\" onClose={(event) => this.setState({postbenefitShow:false})} dismissible>\r\n                             <Alert.Heading>Error Creating Benefit</Alert.Heading>\r\n                             <p>Server might be down: or Currently unavailable</p>\r\n                             </Alert> \r\n                            : null\r\n                         }\r\n                         {onPostSuccess?\r\n                             <Alert show={postbenefitShow} variant=\"success\" onClose={(event) => this.setState({postbenefitShow:false})} dismissible>\r\n                              <Alert.Heading>Benefit Created Successfully</Alert.Heading>\r\n                             </Alert> \r\n                            : null\r\n                         }\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Benefit Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={benefitname} onChange={(e) => this.setState({benefitname : e.target.value})}/>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Amount</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col md={3}>\r\n                                    <Form.Check type=\"radio\" name=\"amountradiobtn\" id=\"flatamountradbtn\" onChange={(e) => this.setState({flatamountradiobtn : e.target.value, calculatedamoutradiobtn:false})}/>\r\n                                    <Form.Label>Flat Amount</Form.Label>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Check type=\"radio\" name=\"amountradiobtn\" id=\"calcamountradbtn\" onChange={(e) => this.setState({calculatedamoutradiobtn : e.target.value, flatamountradiobtn:false})}/>\r\n                                    <Form.Label>Calculated Amount</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            {flatamountradiobtn?\r\n                                <Form.Row>\r\n                                    <Col>\r\n                                        <Form.Control type=\"text\" value={flatamount} onChange={(e) => this.setState({flatamount : e.target.value, calculatedamount: '0',percentageonCalcamount:'0'})}/>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                                :null\r\n                            }\r\n                            {calculatedamoutradiobtn?\r\n                                <Form.Row>\r\n                                    <Col>\r\n                                        <Form.Label>Amount</Form.Label>\r\n                                        <Form.Control value={calculatedamount} onChange={(e) => this.setState({calculatedamount : e.target.value, flatamount: '0'})}/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>% on Amount</Form.Label>\r\n                                        <Form.Control value={percentageonCalcamount} onChange={(e) => this.setState({percentageonCalcamount : e.target.value})}/>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                                :null\r\n                            }\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Frequency</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                  <Form.Control as=\"select\" id=\"frequencyId\">\r\n                                       <option value=\"1month\">1month</option>\r\n                                       <option value=\"2months\">2months</option>\r\n                                       <option value=\"3months\">3months</option>\r\n                                       <option value=\"4months\">4months</option>\r\n                                       <option value=\"5months\">5months</option>\r\n                                       <option value=\"6months\">6months</option>\r\n                                       <option value=\"7months\">7months</option>\r\n                                       <option value=\"8months\">8months</option>\r\n                                       <option value=\"9months\">9months</option>\r\n                                       <option value=\"10months\">10months</option>\r\n                                       <option value=\"11months\">11months</option>\r\n                                       <option value=\"12months\">12months</option>\r\n                                  </Form.Control>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"my-2\">\r\n                               <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDesignations(pageDesignation + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Col>\r\n                                    <Form.Label>Select Designation(s)</Form.Label>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                 <Col>\r\n                                    <Form.Control as=\"select\" multiple id=\"designationId\" onChange={this.multipleselectHandler}>\r\n                                    {resultDesignation ?\r\n                                        resultDesignation.content.map(designation => (\r\n                                        <option value={designation.id}>{designation.designationname}</option>\r\n                                        ))\r\n                                         : null\r\n                                     }   \r\n                                    </Form.Control>\r\n                                 </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"my-2\">\r\n                               <Col>\r\n                                  <Button variant=\"secondary mb-2\" onClick={() => this.fetchAllDepartments(pageDept - 1)}>\r\n                                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                                     Prev\r\n                                  </Button>\r\n                                   <Button variant=\"secondary mx-2 mb-2\" onClick={() => this.fetchAllDepartments(pageDept + 1)}>\r\n                                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                                     Next\r\n                                   </Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                        <Form.Row>\r\n                            <Col>\r\n                               <Button variant=\"success mt-2\"  type=\"button\" size=\"lg\"  onClick={this.addBenefittoDB}>\r\n                                        Add Benefit  \r\n                               </Button>\r\n                               <Button variant=\"warning mt-2 mx-4\"  type=\"button\" size=\"lg\"  onClick={this.clearModalFields}>\r\n                                        Clear  \r\n                               </Button>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                {/* modal to add new benefit========================================================== */}\r\n\r\n                {result?\r\n                       <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                       <thead>\r\n                           <tr>\r\n                               <th>BENEFIT NAMES</th>\r\n                               <th>FREQUENCY</th>\r\n                               <th>AMOUNT FLAT</th>\r\n                               <th>AMOUNT CALCULATED</th>\r\n                               <th>%AMOUNT CALCULATED</th>\r\n                               <th>DESIGNATION NAME</th>\r\n                               <th>DESIGNATION DEPT NAME</th>\r\n                               <th>ACTION</th>\r\n                           </tr>\r\n                       </thead>\r\n                       <tbody>\r\n                           {result.content.map(benefit => \r\n                                   <tr key={benefit.id}>\r\n                                   <td>{benefit.benefitname}</td>\r\n                                   <td>{benefit.frequency}</td>\r\n                                   <td>{benefit.flatamount}</td>\r\n                                   <td>{benefit.calculatedamount}</td>\r\n                                   <td>{benefit.percentagevalue}</td>\r\n                                   <td>{benefit.designation?\r\n                                        benefit.designation.designationname\r\n                                        :null\r\n                                       }\r\n                                   </td>\r\n                                   <td>{benefit.designation?\r\n                                        benefit.designation.department.departmentname\r\n                                        :null\r\n                                      }\r\n                                   </td>\r\n                                   <td>\r\n                                       <Button variant=\"danger mx-1\" onClick={() => this.onDelete(benefit.id)}>\r\n                                           <FontAwesomeIcon icon={faTrash}/>\r\n                                       </Button>\r\n                                   </td>\r\n                               </tr>\r\n                               )\r\n                           }\r\n                       </tbody>\r\n                       </Table>\r\n                       : null\r\n                       }\r\n                       <Button variant=\"primary\" onClick={() => this.fetchAllBenefits(page - 1)}>\r\n                           <FontAwesomeIcon icon={faArrowLeft}/>\r\n                           Prev\r\n                       </Button>\r\n                       <Button variant=\"primary mx-3\" onClick={() => this.fetchAllBenefits(page + 1)}>\r\n                       <FontAwesomeIcon icon={faArrowRight}/>\r\n                          Next\r\n                       </Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewBenefits","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\benefitmainTab.js",["189","190","191","192"],"import React,{Component} from 'react'\r\nimport {Tabs,Tab,Nav,Col,Row,\r\n    TabContainer,TabContent,TabPane } from 'react-bootstrap'\r\nimport ViewBenefits from './viewbenefits'\r\nimport AssignBenefits from './assignbenefit'\r\n\r\nclass BenefitMain extends Component{\r\n    render(){\r\n        return(\r\n            <Tab.Container  defaultActiveKey=\"viewbenefits\">\r\n            <Row>\r\n              <Col sm={2}>\r\n                <Nav variant=\"pills\" className=\"flex-column\">\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"viewbenefits\">View Benefits</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"assignbenefits\">Assign Benefits</Nav.Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n              </Col>\r\n              <Col sm={10}>\r\n                <Tab.Content>\r\n                  <Tab.Pane eventKey=\"viewbenefits\">\r\n                    <ViewBenefits />\r\n                  </Tab.Pane>\r\n                  <Tab.Pane eventKey=\"assignbenefits\">\r\n                    <AssignBenefits />\r\n                  </Tab.Pane>\r\n                </Tab.Content>\r\n              </Col>\r\n            </Row>\r\n          </Tab.Container> \r\n        );\r\n    }\r\n}\r\n\r\nexport default BenefitMain;","C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js",[],"C:\\Users\\fmg3c\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\apiCalls.js",["193","194","195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":2,"column":22,"nodeType":"203","messageId":"204","endLine":2,"endColumn":30},{"ruleId":"201","severity":1,"message":"205","line":66,"column":15,"nodeType":"203","messageId":"204","endLine":66,"endColumn":27},{"ruleId":"201","severity":1,"message":"206","line":66,"column":28,"nodeType":"203","messageId":"204","endLine":66,"endColumn":38},{"ruleId":"201","severity":1,"message":"207","line":136,"column":17,"nodeType":"203","messageId":"204","endLine":136,"endColumn":20},{"ruleId":"201","severity":1,"message":"207","line":142,"column":17,"nodeType":"203","messageId":"204","endLine":142,"endColumn":20},{"ruleId":"201","severity":1,"message":"208","line":2,"column":21,"nodeType":"203","messageId":"204","endLine":2,"endColumn":30},{"ruleId":"201","severity":1,"message":"209","line":3,"column":5,"nodeType":"203","messageId":"204","endLine":3,"endColumn":9},{"ruleId":"201","severity":1,"message":"210","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":18},{"ruleId":"201","severity":1,"message":"211","line":3,"column":19,"nodeType":"203","messageId":"204","endLine":3,"endColumn":28},{"ruleId":"201","severity":1,"message":"212","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":40},{"ruleId":"201","severity":1,"message":"213","line":3,"column":41,"nodeType":"203","messageId":"204","endLine":3,"endColumn":50},{"ruleId":"201","severity":1,"message":"214","line":3,"column":51,"nodeType":"203","messageId":"204","endLine":3,"endColumn":54},{"ruleId":"201","severity":1,"message":"215","line":3,"column":55,"nodeType":"203","messageId":"204","endLine":3,"endColumn":58},{"ruleId":"201","severity":1,"message":"216","line":4,"column":5,"nodeType":"203","messageId":"204","endLine":4,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":4,"column":18,"nodeType":"203","messageId":"204","endLine":4,"endColumn":28},{"ruleId":"201","severity":1,"message":"218","line":4,"column":29,"nodeType":"203","messageId":"204","endLine":4,"endColumn":36},{"ruleId":"201","severity":1,"message":"219","line":5,"column":14,"nodeType":"203","messageId":"204","endLine":5,"endColumn":19},{"ruleId":"201","severity":1,"message":"220","line":5,"column":20,"nodeType":"203","messageId":"204","endLine":5,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":5,"column":27,"nodeType":"203","messageId":"204","endLine":5,"endColumn":35},{"ruleId":"201","severity":1,"message":"221","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":17},{"ruleId":"201","severity":1,"message":"222","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":15},{"ruleId":"201","severity":1,"message":"223","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":17},{"ruleId":"201","severity":1,"message":"224","line":10,"column":8,"nodeType":"203","messageId":"204","endLine":10,"endColumn":19},{"ruleId":"201","severity":1,"message":"225","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":24},{"ruleId":"201","severity":1,"message":"226","line":12,"column":8,"nodeType":"203","messageId":"204","endLine":12,"endColumn":26},{"ruleId":"201","severity":1,"message":"227","line":13,"column":8,"nodeType":"203","messageId":"204","endLine":13,"endColumn":23},{"ruleId":"201","severity":1,"message":"228","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":25},{"ruleId":"201","severity":1,"message":"229","line":15,"column":8,"nodeType":"203","messageId":"204","endLine":15,"endColumn":20},{"ruleId":"201","severity":1,"message":"230","line":16,"column":8,"nodeType":"203","messageId":"204","endLine":16,"endColumn":22},{"ruleId":"201","severity":1,"message":"231","line":17,"column":8,"nodeType":"203","messageId":"204","endLine":17,"endColumn":19},{"ruleId":"232","severity":1,"message":"233","line":33,"column":14,"nodeType":"234","endLine":34,"endColumn":88},{"ruleId":"201","severity":1,"message":"235","line":4,"column":18,"nodeType":"203","messageId":"204","endLine":4,"endColumn":33},{"ruleId":"201","severity":1,"message":"236","line":4,"column":34,"nodeType":"203","messageId":"204","endLine":4,"endColumn":44},{"ruleId":"237","severity":1,"message":"238","line":283,"column":67,"nodeType":"239","messageId":"240","endLine":283,"endColumn":69},{"ruleId":"201","severity":1,"message":"236","line":2,"column":18,"nodeType":"203","messageId":"204","endLine":2,"endColumn":28},{"ruleId":"201","severity":1,"message":"241","line":3,"column":26,"nodeType":"203","messageId":"204","endLine":3,"endColumn":40},{"ruleId":"201","severity":1,"message":"242","line":72,"column":31,"nodeType":"203","messageId":"204","endLine":72,"endColumn":45},{"ruleId":"201","severity":1,"message":"243","line":72,"column":62,"nodeType":"203","messageId":"204","endLine":72,"endColumn":76},{"ruleId":"201","severity":1,"message":"244","line":72,"column":77,"nodeType":"203","messageId":"204","endLine":72,"endColumn":100},{"ruleId":"201","severity":1,"message":"245","line":72,"column":101,"nodeType":"203","messageId":"204","endLine":72,"endColumn":122},{"ruleId":"201","severity":1,"message":"246","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":13},{"ruleId":"201","severity":1,"message":"216","line":3,"column":5,"nodeType":"203","messageId":"204","endLine":3,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":3,"column":18,"nodeType":"203","messageId":"204","endLine":3,"endColumn":28},{"ruleId":"201","severity":1,"message":"218","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":36},{"ruleId":"201","severity":1,"message":"246","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":13},{"ruleId":"201","severity":1,"message":"216","line":3,"column":5,"nodeType":"203","messageId":"204","endLine":3,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":3,"column":18,"nodeType":"203","messageId":"204","endLine":3,"endColumn":28},{"ruleId":"201","severity":1,"message":"218","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":36},{"ruleId":"201","severity":1,"message":"247","line":7,"column":35,"nodeType":"203","messageId":"204","endLine":7,"endColumn":41},{"ruleId":"201","severity":1,"message":"248","line":7,"column":42,"nodeType":"203","messageId":"204","endLine":7,"endColumn":49},{"ruleId":"201","severity":1,"message":"249","line":7,"column":50,"nodeType":"203","messageId":"204","endLine":7,"endColumn":56},{"ruleId":"201","severity":1,"message":"250","line":72,"column":38,"nodeType":"203","messageId":"204","endLine":72,"endColumn":59},{"ruleId":"201","severity":1,"message":"243","line":72,"column":76,"nodeType":"203","messageId":"204","endLine":72,"endColumn":90},{"ruleId":"201","severity":1,"message":"251","line":72,"column":91,"nodeType":"203","messageId":"204","endLine":72,"endColumn":121},{"ruleId":"201","severity":1,"message":"252","line":72,"column":122,"nodeType":"203","messageId":"204","endLine":72,"endColumn":150},{"ruleId":"201","severity":1,"message":"253","line":2,"column":18,"nodeType":"203","messageId":"204","endLine":2,"endColumn":41},{"ruleId":"201","severity":1,"message":"254","line":143,"column":22,"nodeType":"203","messageId":"204","endLine":143,"endColumn":27},{"ruleId":"201","severity":1,"message":"255","line":146,"column":13,"nodeType":"203","messageId":"204","endLine":146,"endColumn":22},{"ruleId":"201","severity":1,"message":"247","line":7,"column":35,"nodeType":"203","messageId":"204","endLine":7,"endColumn":41},{"ruleId":"201","severity":1,"message":"248","line":7,"column":42,"nodeType":"203","messageId":"204","endLine":7,"endColumn":49},{"ruleId":"201","severity":1,"message":"249","line":7,"column":50,"nodeType":"203","messageId":"204","endLine":7,"endColumn":56},{"ruleId":"201","severity":1,"message":"256","line":72,"column":31,"nodeType":"203","messageId":"204","endLine":72,"endColumn":45},{"ruleId":"201","severity":1,"message":"243","line":72,"column":62,"nodeType":"203","messageId":"204","endLine":72,"endColumn":76},{"ruleId":"201","severity":1,"message":"257","line":72,"column":77,"nodeType":"203","messageId":"204","endLine":72,"endColumn":100},{"ruleId":"201","severity":1,"message":"258","line":72,"column":101,"nodeType":"203","messageId":"204","endLine":72,"endColumn":122},{"ruleId":"201","severity":1,"message":"259","line":3,"column":9,"nodeType":"203","messageId":"204","endLine":3,"endColumn":28},{"ruleId":"201","severity":1,"message":"236","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":39},{"ruleId":"201","severity":1,"message":"260","line":72,"column":15,"nodeType":"203","messageId":"204","endLine":72,"endColumn":30},{"ruleId":"201","severity":1,"message":"261","line":72,"column":31,"nodeType":"203","messageId":"204","endLine":72,"endColumn":48},{"ruleId":"201","severity":1,"message":"257","line":72,"column":84,"nodeType":"203","messageId":"204","endLine":72,"endColumn":107},{"ruleId":"201","severity":1,"message":"258","line":72,"column":108,"nodeType":"203","messageId":"204","endLine":72,"endColumn":129},{"ruleId":"201","severity":1,"message":"262","line":2,"column":29,"nodeType":"203","messageId":"204","endLine":2,"endColumn":49},{"ruleId":"201","severity":1,"message":"247","line":7,"column":35,"nodeType":"203","messageId":"204","endLine":7,"endColumn":41},{"ruleId":"201","severity":1,"message":"263","line":166,"column":33,"nodeType":"203","messageId":"204","endLine":166,"endColumn":43},{"ruleId":"201","severity":1,"message":"246","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":13},{"ruleId":"201","severity":1,"message":"216","line":3,"column":5,"nodeType":"203","messageId":"204","endLine":3,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":3,"column":18,"nodeType":"203","messageId":"204","endLine":3,"endColumn":28},{"ruleId":"201","severity":1,"message":"218","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":36},{"ruleId":"201","severity":1,"message":"264","line":2,"column":65,"nodeType":"203","messageId":"204","endLine":2,"endColumn":80},{"ruleId":"201","severity":1,"message":"265","line":3,"column":9,"nodeType":"203","messageId":"204","endLine":3,"endColumn":21},{"ruleId":"201","severity":1,"message":"266","line":3,"column":22,"nodeType":"203","messageId":"204","endLine":3,"endColumn":49},{"ruleId":"201","severity":1,"message":"267","line":3,"column":50,"nodeType":"203","messageId":"204","endLine":3,"endColumn":69},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'successLogin' is assigned a value but never used.","'errorLogin' is assigned a value but never used.","'res' is assigned a value but never used.","'Jumbotron' is defined but never used.","'Card' is defined but never used.","'CardDeck' is defined but never used.","'CardGroup' is defined but never used.","'CardColumns' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'ViewUsers' is defined but never used.","'AddUser' is defined but never used.","'ViewRoles' is defined but never used.","'AssignRoles' is defined but never used.","'ViewDesignations' is defined but never used.","'AssignDesignations' is defined but never used.","'ViewDepartments' is defined but never used.","'AssignDepartments' is defined but never used.","'ViewBenefits' is defined but never used.","'AssignBenefits' is defined but never used.","'UserDetails' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PATHGETALLUSERS' is defined but never used.","'PARAM_PAGE' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'PATH_GET_ROLES' is defined but never used.","'errorRolefetch' is assigned a value but never used.","'errorUserfetch' is assigned a value but never used.","'resultRoleassignSuccess' is assigned a value but never used.","'resultRoleassignError' is assigned a value but never used.","'Tabs' is defined but never used.","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'faPlus' is defined but never used.","'errorDesignationfetch' is assigned a value but never used.","'resultDesignationAssignSuccess' is assigned a value but never used.","'resultDesignationAssignError' is assigned a value but never used.","'PATH_GETALL_DESIGNATION' is defined but never used.","'error' is assigned a value but never used.","'deptError' is assigned a value but never used.","'errorDeptfetch' is assigned a value but never used.","'resultDeptAssignSuccess' is assigned a value but never used.","'resultDeptAssignError' is assigned a value but never used.","'PATH_GET_DEPARTMENT' is defined but never used.","'resultDeptfetch' is assigned a value but never used.","'errorBenefitfetch' is assigned a value but never used.","'PATH_GETALL_BENEFITS' is defined but never used.","'resultDept' is assigned a value but never used.","'PATH_DELETEUSER' is defined but never used.","'PARAM_DELETE' is defined but never used.","'PATH_SENDLOGINDETAILS_GMAIL' is defined but never used.","'PATH_PATCH_EDITUSER' is defined but never used.","no-global-assign","no-unsafe-negation"]