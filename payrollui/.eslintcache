[{"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\index.js":"1","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js":"2","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\App.js":"3","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js":"4","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js":"5","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js":"6","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js":"7","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js":"8","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js":"9","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js":"10","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js":"11","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js":"12","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js":"13","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js":"14","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js":"15","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js":"16","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js":"17"},{"size":547,"mtime":1612002297887,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":515,"mtime":1612007362592,"results":"21","hashOfConfig":"19"},{"size":2965,"mtime":1612007993314,"results":"22","hashOfConfig":"19"},{"size":417,"mtime":1612033855562,"results":"23","hashOfConfig":"19"},{"size":6810,"mtime":1612079596908,"results":"24","hashOfConfig":"19"},{"size":20425,"mtime":1612042468778,"results":"25","hashOfConfig":"19"},{"size":10709,"mtime":1612033833441,"results":"26","hashOfConfig":"19"},{"size":7442,"mtime":1612088927509,"results":"27","hashOfConfig":"19"},{"size":10910,"mtime":1612096514513,"results":"28","hashOfConfig":"19"},{"size":14613,"mtime":1612097356318,"results":"29","hashOfConfig":"19"},{"size":7997,"mtime":1612099154590,"results":"30","hashOfConfig":"19"},{"size":218,"mtime":1612015018692,"results":"31","hashOfConfig":"19"},{"size":212,"mtime":1612014993925,"results":"32","hashOfConfig":"19"},{"size":208,"mtime":1612015641094,"results":"33","hashOfConfig":"19"},{"size":202,"mtime":1612015619990,"results":"34","hashOfConfig":"19"},{"size":3038,"mtime":1612098936265,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"z39r0f",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\index.js",[],["73","74"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\reportWebVitals.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\App.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\login\\loginform.js",["75","76","77"],"import React,{Component} from 'react'\r\nimport GoogleLogin from 'react-google-login'\r\nimport axios from 'axios'\r\nimport './loginform.css'\r\nimport {Container,Row,Col,Form,Button} from 'react-bootstrap'\r\n\r\nclass LoginForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n        \r\n          //login in with google\r\n          buttonText:'Login With Google',\r\n          googlename:null,\r\n          googleemail:null,\r\n          googletoken:null,\r\n          googleProviderId: 'Google',\r\n          onGoogleLoginSuccess: null,\r\n          onGoogleLoginFailure: null,\r\n          clientId: '552767747033-o7fm828mscm2otn5oprkfjjtq3qscqad.apps.googleusercontent.com'\r\n        }\r\n\r\n        this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\r\n    }\r\n\r\n    handleLoginSubmit(){\r\n        //redirect to main dashboard\r\n\r\n        this.props.history.push(\"/main\")\r\n    }\r\n\r\n    signUpUserIfnotINDB(response){\r\n        //will implement logics here\r\n\r\n        //redirect to main dashboard\r\n        this.props.history.push(\"/main\")\r\n    }\r\n\r\n    render(){\r\n        const{buttonText,clientId} = this.state;\r\n        const onGoogleLoginSuccess = (response) => {\r\n            let res = response.profileObj;\r\n            \r\n            this.signUpUserIfnotINDB(response);\r\n        }\r\n\r\n        const onGoogleLoginFailure = (response) => {\r\n            let res = response.profileObj;\r\n        }\r\n\r\n        return(\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"sidePage\" md={3}></Col>\r\n                    <Col md={2} className=\"formpage\"></Col>\r\n                    <Col md={4} className=\"formpage\">\r\n                        <Form className=\"mt-5 pt-2\">\r\n                            <Form.Group controlId=\"email\">\r\n                                <Form.Label className=\"mt-5 pt-5\">Email address</Form.Label>\r\n                                <Form.Control type=\"email\" size=\"lg\" placeholder=\"Enter email\"/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"password\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" size=\"lg\" placeholder=\"Password\"/>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\"  type=\"submit\" size=\"lg\" block className=\"mb-4\" onClick={this.handleLoginSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                            <GoogleLogin clientId={clientId} buttonText={buttonText}\r\n                                         onSuccess={onGoogleLoginSuccess}\r\n                                         onFailure={onGoogleLoginFailure}/>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={3} className=\"formpage\"></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Main.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\components\\Dashboard.js",["78","79","80","81"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\viewusers.js",["82"],"import { Container,Button,Alert,Modal,Form,Col} from \"react-bootstrap\"\r\nimport React,{Component} from  'react'\r\nimport axios from 'axios'\r\nimport {PATHBASE,PATHGETALLUSERS,PARAM_PAGE,PATH_DELETEUSER\r\n ,PARAM_DELETE,PATH_SENDLOGINDETAILS_GMAIL,PATH_PATCH_EDITUSER} from '../API_URLS'\r\nimport {Table} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight,faArrowLeft,faEdit,faTrash, faToggleOn, faMailBulk } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass ViewUsers extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state ={\r\n            //retrieve users attributes\r\n            result:null,\r\n            error:null,\r\n\r\n            //delete user attributes\r\n            resultDel:null,\r\n            errorDel:null,\r\n\r\n            //send login details attributes\r\n            loginDetailSent:null,\r\n            loginDetailsError:null,\r\n\r\n            //alert attributes\r\n            show:true,\r\n\r\n            //modal attributes\r\n            showModal:false,\r\n\r\n            //checkbox attribute\r\n            userstoDisable:[],\r\n\r\n            //update user atttributes\r\n            onUpdateSuccess:null,\r\n            onUpdateError:null,\r\n        }\r\n\r\n        this.fetchAllUsers = this.fetchAllUsers.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSelected = this.onSelected.bind(this);\r\n        this.SendLoginDetails = this.SendLoginDetails.bind(this);\r\n        this.onEditUser = this.onEditUser.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n    }\r\n    \r\n    fetchAllUsers(page = 0){\r\n        axios.get(`${PATHBASE}${PATHGETALLUSERS}?${PARAM_PAGE}${page}`)\r\n             .then(result => this.setState({result: result.data}))\r\n             .then(error => this.setState({error}));\r\n    }\r\n\r\n    onSelected(id){\r\n        const{userstoDisable}=this.state;\r\n        userstoDisable.push(id);\r\n    }\r\n\r\n    onDelete(id){\r\n        const{userstoDisable,result}=this.state;\r\n        if(userstoDisable[0] === id){\r\n            axios.get(`${PATHBASE}${PATH_DELETEUSER}?${PARAM_DELETE}${id}`)\r\n                 .then(resultDel => this.setState({resultDel: resultDel.data}))\r\n                 .then(errorDel => this.setState({errorDel}))\r\n            userstoDisable.pop();\r\n\r\n        this.fetchAllUsers();\r\n        }else{\r\n            window.alert(\"You need to select immediate checkbox before you can delete\")\r\n        }\r\n    }\r\n\r\n    SendLoginDetails(email,password){\r\n        axios.get(`${PATHBASE}${PATH_SENDLOGINDETAILS_GMAIL}/${email}/${password}`)\r\n             .then(loginDetailSent => this.setState({loginDetailSent: loginDetailSent.data}))\r\n             .then(loginDetailsError => this.setState({loginDetailsError}))\r\n    }       \r\n\r\n    onEditUser(userid,useraddress,usercity,useremail,\r\n        useremployeeid,useremployeelevel,userenabled,userpassword,userphonenumber,\r\n        userbankaccountnumber,userbirthdate,usergender,userhiredate,usermaritalstatus,\r\n        userbirthcertid,userdriverslicenseid,userpassportid,userssnitid,uservotersid,\r\n        username,usertinnumber,usermarriagecertid,userusercreator){\r\n\r\n        this.setState({\r\n            id: userid,\r\n            address: useraddress,\r\n            city: usercity,\r\n            email: useremail,\r\n            employeeid: useremployeeid,\r\n            employeelevel: useremployeelevel ,\r\n            enabled: userenabled,\r\n            password: userpassword,\r\n            phonenumber: userphonenumber,\r\n            bankaccountnumber:userbankaccountnumber,\r\n            birthdate: userbirthdate,\r\n            gender:usergender,\r\n            hiredate: userhiredate,\r\n            maritalstatus:usermaritalstatus,\r\n            birthcertid: userbirthcertid,\r\n            driverslicenseid: userdriverslicenseid,\r\n            passportid: userpassportid,\r\n            ssnitid: userssnitid,\r\n            votersid:uservotersid,\r\n            tinnumber: usertinnumber,\r\n            marriagecertid: usermarriagecertid,\r\n            usercreator: userusercreator,\r\n            name: username,\r\n       })\r\n\r\n       this.setState({\r\n           showModal:true\r\n       })\r\n    }\r\n\r\n    updateUser(){\r\n        const{id, address,city,email,employeeid,employeelevel,enabled,password,phonenumber,bankaccountnumber,birthdate,\r\n            gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n            marriagecertid,usercreator} = this.state;\r\n        \r\n            const headers = { 'content-type': 'application/json'};\r\n            axios({\r\n                method: 'patch',\r\n                url: `${PATHBASE}${PATH_PATCH_EDITUSER}`,\r\n                data: {\r\n                    id:id,\r\n                    address: address,\r\n                    city: city,\r\n                    email: email,\r\n                    employeeid: employeeid,\r\n                    employeelevel: employeelevel ,\r\n                    enabled: enabled,\r\n                    password: password,\r\n                    phonenumber: phonenumber,\r\n                    bankaccountnumber:bankaccountnumber,\r\n                    birthdate: birthdate,\r\n                    gender:gender,\r\n                    hiredate: hiredate,\r\n                    maritalstatus:maritalstatus,\r\n                    birthcertid: birthcertid,\r\n                    driverslicenseid: driverslicenseid,\r\n                    passportid: passportid,\r\n                    ssnitid: ssnitid,\r\n                    votersid:votersid,\r\n                    tinnumber: tinnumber,\r\n                    marriagecertid: marriagecertid,\r\n                    usercreator: usercreator,\r\n                    name: name,\r\n                },\r\n                headers: headers\r\n            })\r\n            .then(onUpdateSuccess => this.setState({onUpdateSuccess: onUpdateSuccess.data}))\r\n            .catch(onUpdateError => this.setState({onUpdateError}));\r\n            \r\n            this.fetchAllUsers();    \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllUsers();\r\n    }\r\n   \r\n    render(){\r\n        const{result,error,resultDel,errorDel, page = 0,show,\r\n        loginDetailSent,loginDetailsError,showModal, onUpdateSuccess,\r\n        onUpdateError,\r\n        \r\n        //user data attributes\r\n        address,city,email,employeeid,employeelevel,password,phonenumber,bankaccountnumber,birthdate,\r\n        gender,hiredate,maritalstatus,birthcertid,driverslicenseid,passportid,ssnitid,votersid,name,tinnumber,\r\n        marriagecertid,   \r\n        } = this.state;\r\n        return(\r\n            <Container fluid>\r\n                {error?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Unsuccessful Fetching User Records</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {errorDel?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Failure Deleting User Record</Alert.Heading>\r\n                    <p>Server might be down or currently not available</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {resultDel?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>User Deleted Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailSent?\r\n                <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>LoginCredentials Sent Successfully</Alert.Heading>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {loginDetailsError?\r\n                <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                    <Alert.Heading>Sending LoginCredentials  UnSuccessfully</Alert.Heading>\r\n                    <p>Email might be wrong: or Server might be down</p>\r\n                </Alert> \r\n                 : null\r\n                }\r\n\r\n                {result?\r\n                  <Table responsive=\"sm\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>EmployeeID</th>\r\n                            <th>EmployeeLevel</th>\r\n                            <th>BankAccountNo</th>\r\n                            <th>HireDate</th>\r\n                            <th>SSNITID</th>\r\n                            <th>NAME</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {result.content.map(user => \r\n                            <tr key={user.id}>\r\n                                <td>{user.employeeid}</td>\r\n                                <td>{user.employeelevel}</td>\r\n                                <td>{user.bankaccountnumber}</td>\r\n                                <td>{user.hiredate}</td>\r\n                                <td>{user.ssnitid}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>\r\n                                    <input type=\"checkbox\" onChange={() => this.onSelected(user.id)}/>\r\n                                    <Button variant=\"primary mx-1\" onClick={() => this.fetchAllUsers(page - 1)}>\r\n                                      <FontAwesomeIcon icon={faToggleOn}/>\r\n                                    </Button>\r\n                                    <Button variant=\"secondary mx-1\" onClick={() => this.onEditUser(user.id,user.address,user.city,user.email,\r\n                                        user.employeeid,user.employeelevel,user.enabled,user.password,user.phonenumber,\r\n                                        user.bankaccountnumber,user.birthdate,user.gender,user.hiredate,user.maritalstatus,\r\n                                        user.birthcertid,user.driverslicenseid,user.passportid,user.ssnitid,user.votersid,\r\n                                        user.name,user.tinnumber,user.marriagecertid,user.usercreator\r\n                                    )}>\r\n                                      <FontAwesomeIcon icon={faEdit}/>\r\n                                    </Button>\r\n                                    <Button variant=\"danger mx-1\" onClick={() => this.onDelete(user.id)}>\r\n                                      <FontAwesomeIcon icon={faTrash}/>\r\n                                    </Button>\r\n                                    <Button variant=\"success\" onClick={() => this.SendLoginDetails(user.email,user.password)}>\r\n                                      <FontAwesomeIcon icon={faMailBulk}/>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                         )\r\n                        }\r\n                    </tbody>\r\n                  </Table>\r\n                 : null\r\n                }\r\n                <Button variant=\"primary\" onClick={() => this.fetchAllUsers(page - 1)}>\r\n                    <FontAwesomeIcon icon={faArrowLeft}/>\r\n                    Prev\r\n                </Button>\r\n                <Button variant=\"primary mx-3\" onClick={() => this.fetchAllUsers(page + 1)}>\r\n                   <FontAwesomeIcon icon={faArrowRight}/>\r\n                    Next\r\n                </Button>\r\n\r\n                {/* launch modal on edit button clicked */}\r\n                <Modal show={showModal} size=\"lg\" onHide={(event) => this.setState({showModal: false})} aria-labelledby=\"contained-modal-title-vcenter\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit User Details</Modal.Title>\r\n                        {onUpdateError?\r\n                        <Alert show={show} variant=\"danger\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>Unsuccessful Updating User Record</Alert.Heading>\r\n                           <p>Server might be down or currently not available</p>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n\r\n                        {onUpdateSuccess?\r\n                        <Alert show={show} variant=\"success\" onClose={(event) => this.setState({show:false})} dismissible>\r\n                           <Alert.Heading>User Record Updated Successfully</Alert.Heading>\r\n                        </Alert> \r\n                        : null\r\n                        }\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Container fluid>\r\n                            <Form>\r\n                              <Form.Row>\r\n                                 <Col>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" value={name} onChange={(e) => this.setState({name : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control type=\"text\" value={address} onChange={(e) => this.setState({address : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                 <Col>\r\n                                   <Form.Label>Email</Form.Label>\r\n                                   <Form.Control type=\"email\" value={email} onChange={(e) => this.setState({email : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col>\r\n                                   <Form.Label>Password</Form.Label>\r\n                                   <Form.Control type=\"password\" value={password} onChange={(e) => this.setState({password : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                               </Form.Row>\r\n                              <Form.Row className=\"mt-4\">\r\n                                  <Col md={3}>\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control type=\"text\" value={gender} onChange={(e) => this.setState({gender : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>Date of Birth</Form.Label>\r\n                                    <Form.Control type=\"date\" value={birthdate} onChange={(e) => this.setState({birthdate : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                 <Col md={3}>\r\n                                    <Form.Label>EmployeeLevel</Form.Label>\r\n                                    <Form.Control type=\"text\" value={employeelevel} onChange={(e) => this.setState({employeelevel : e.target.value})}></Form.Control>\r\n                                 </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Label>HireDate</Form.Label>\r\n                                    <Form.Control type=\"date\" value={hiredate} onChange={(e) => this.setState({hiredate : e.target.value})}></Form.Control>\r\n                                </Col>\r\n                            </Form.Row>\r\n                            <Form.Row className=\"mt-4\">\r\n                              <Col md={3}>\r\n                                 <Form.Label>City</Form.Label>\r\n                                 <Form.Control type=\"text\" value={city} onChange={(e) => this.setState({city : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>PhoneNumber</Form.Label>\r\n                                 <Form.Control type=\"text\" value={phonenumber} onChange={(e) => this.setState({phonenumber : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Label>MaritalStatus</Form.Label>\r\n                                 <Form.Control type=\"text\" value={maritalstatus} onChange={(e) => this.setState({maritalstatus : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                <Form.Label>EmployeeID</Form.Label>\r\n                                <Form.Control type=\"text\" value={employeeid} onChange={(e) => this.setState({employeeid : e.target.value})}></Form.Control>\r\n                              </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                               <Form.Label>BankAccountNo</Form.Label>\r\n                               <Form.Control type=\"text\" value={bankaccountnumber} placedholder=\"Enter bankaccountno here\" onChange={(e) => this.setState({bankaccountnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>SSNITID</Form.Label>\r\n                               <Form.Control type=\"text\" value={ssnitid} onChange={(e) => this.setState({ssnitid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                              <Form.Label>VotersID</Form.Label>\r\n                              <Form.Control type=\"text\" value={votersid} onChange={(e) => this.setState({votersid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                            <Col md={3}>\r\n                               <Form.Label>BirthCertificate</Form.Label>\r\n                               <Form.Control type=\"text\" value={birthcertid} onChange={(e) => this.setState({birthcertid : e.target.value})}></Form.Control>\r\n                            </Col>\r\n                          </Form.Row>\r\n                          <Form.Row className=\"mt-4\">\r\n                             <Col md={3}>\r\n                                <Form.Label>DriversLicense</Form.Label>\r\n                                <Form.Control type=\"text\" value={driverslicenseid} onChange={(e) => this.setState({driverslicenseid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>PassportNo</Form.Label>\r\n                                <Form.Control type=\"text\" value={passportid} onChange={(e) => this.setState({passportid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                               <Form.Label>Tin Number</Form.Label>\r\n                               <Form.Control type=\"text\" value={tinnumber} onChange={(e) => this.setState({tinnumber : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                             <Col md={3}>\r\n                                <Form.Label>Marriage Cert</Form.Label>\r\n                                <Form.Control type=\"text\" value={marriagecertid} onChange={(e) => this.setState({marriagecertid : e.target.value})}></Form.Control>\r\n                             </Col>\r\n                          </Form.Row>\r\n                           <Form.Row className=\"mt-4\">\r\n                            <Col md={4}></Col>\r\n                            <Col md={4}>\r\n                               <Button variant=\"success\"  type=\"button\" size=\"lg\" block className=\"mb-4\" onClick={this.updateUser}>\r\n                                 UpdateDetails\r\n                               </Button>\r\n                             </Col>\r\n                            <Col md={4}></Col>\r\n                          </Form.Row>\r\n                          </Form>\r\n                        </Container>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewUsers","C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\users\\adduser.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\assignroles.js",["83","84","85","86","87","88","89"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\roles\\viewroles.js",["90"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\viewdesignations.js",["91","92"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\designation\\assigndesignations.js",["93","94","95","96","97","98","99"],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\assigndepartments.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\departments\\viewdepartments.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\assignbenefit.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\benefits\\viewbenefits.js",[],"C:\\Users\\STHIGWGFWB\\Desktop\\PayrollUI2\\payrollui\\src\\API_URLS\\index.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":13},{"ruleId":"104","severity":1,"message":"108","line":43,"column":17,"nodeType":"106","messageId":"107","endLine":43,"endColumn":20},{"ruleId":"104","severity":1,"message":"108","line":49,"column":17,"nodeType":"106","messageId":"107","endLine":49,"endColumn":20},{"ruleId":"104","severity":1,"message":"109","line":2,"column":21,"nodeType":"106","messageId":"107","endLine":2,"endColumn":30},{"ruleId":"104","severity":1,"message":"110","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":18},{"ruleId":"104","severity":1,"message":"111","line":3,"column":19,"nodeType":"106","messageId":"107","endLine":3,"endColumn":28},{"ruleId":"104","severity":1,"message":"112","line":3,"column":29,"nodeType":"106","messageId":"107","endLine":3,"endColumn":40},{"ruleId":"104","severity":1,"message":"113","line":61,"column":30,"nodeType":"106","messageId":"107","endLine":61,"endColumn":36},{"ruleId":"104","severity":1,"message":"114","line":7,"column":35,"nodeType":"106","messageId":"107","endLine":7,"endColumn":41},{"ruleId":"104","severity":1,"message":"115","line":7,"column":42,"nodeType":"106","messageId":"107","endLine":7,"endColumn":49},{"ruleId":"104","severity":1,"message":"116","line":7,"column":50,"nodeType":"106","messageId":"107","endLine":7,"endColumn":56},{"ruleId":"104","severity":1,"message":"117","line":72,"column":31,"nodeType":"106","messageId":"107","endLine":72,"endColumn":45},{"ruleId":"104","severity":1,"message":"118","line":72,"column":62,"nodeType":"106","messageId":"107","endLine":72,"endColumn":76},{"ruleId":"104","severity":1,"message":"119","line":72,"column":77,"nodeType":"106","messageId":"107","endLine":72,"endColumn":100},{"ruleId":"104","severity":1,"message":"120","line":72,"column":101,"nodeType":"106","messageId":"107","endLine":72,"endColumn":122},{"ruleId":"104","severity":1,"message":"121","line":127,"column":14,"nodeType":"106","messageId":"107","endLine":127,"endColumn":22},{"ruleId":"104","severity":1,"message":"122","line":139,"column":22,"nodeType":"106","messageId":"107","endLine":139,"endColumn":27},{"ruleId":"104","severity":1,"message":"123","line":142,"column":13,"nodeType":"106","messageId":"107","endLine":142,"endColumn":22},{"ruleId":"104","severity":1,"message":"114","line":7,"column":35,"nodeType":"106","messageId":"107","endLine":7,"endColumn":41},{"ruleId":"104","severity":1,"message":"115","line":7,"column":42,"nodeType":"106","messageId":"107","endLine":7,"endColumn":49},{"ruleId":"104","severity":1,"message":"116","line":7,"column":50,"nodeType":"106","messageId":"107","endLine":7,"endColumn":56},{"ruleId":"104","severity":1,"message":"124","line":72,"column":38,"nodeType":"106","messageId":"107","endLine":72,"endColumn":59},{"ruleId":"104","severity":1,"message":"118","line":72,"column":76,"nodeType":"106","messageId":"107","endLine":72,"endColumn":90},{"ruleId":"104","severity":1,"message":"125","line":72,"column":91,"nodeType":"106","messageId":"107","endLine":72,"endColumn":121},{"ruleId":"104","severity":1,"message":"126","line":72,"column":122,"nodeType":"106","messageId":"107","endLine":72,"endColumn":150},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","'Jumbotron' is defined but never used.","'CardDeck' is defined but never used.","'CardGroup' is defined but never used.","'CardColumns' is defined but never used.","'result' is assigned a value but never used.","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'faPlus' is defined but never used.","'errorRolefetch' is assigned a value but never used.","'errorUserfetch' is assigned a value but never used.","'resultRoleassignSuccess' is assigned a value but never used.","'resultRoleassignError' is assigned a value but never used.","'rolename' is assigned a value but never used.","'error' is assigned a value but never used.","'deptError' is assigned a value but never used.","'errorDesignationfetch' is assigned a value but never used.","'resultDesignationAssignSuccess' is assigned a value but never used.","'resultDesignationAssignError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]